Grammar:

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID saveprogramname declare
Rule 2     declare -> decvars decfuncs main_block
Rule 3     main_block -> MAIN changecontext LPAREN RPAREN block
Rule 4     block -> LCURLY decvars blockcontent RCURLY
Rule 5     returnblock -> LCURLY decvars blockcontent RETURN exp SEMICOLON RCURLY
Rule 6     blockcontent -> empty
Rule 7     blockcontent -> statute blockcontent
Rule 8     decvars -> empty
Rule 9     decvars -> VARS decvar_line
Rule 10    decvar_line -> type decvar SEMICOLON decvar_line
Rule 11    decvar_line -> type decvar SEMICOLON
Rule 12    decvar -> var COMMA decvar
Rule 13    decvar -> var
Rule 14    var -> BOOL
Rule 15    var -> FLOAT
Rule 16    var -> INT
Rule 17    var -> ELSE
Rule 18    var -> IF
Rule 19    var -> PRINT
Rule 20    var -> INPUT
Rule 21    var -> WHILE
Rule 22    var -> DO
Rule 23    var -> BY
Rule 24    var -> TO
Rule 25    var -> FROM
Rule 26    var -> VOID
Rule 27    var -> RETURN
Rule 28    var -> FUNC
Rule 29    var -> MAIN
Rule 30    var -> VARS
Rule 31    var -> PROGRAM
Rule 32    var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
Rule 33    var -> ID LBRACKET CTEINT RBRACKET
Rule 34    var -> ID
Rule 35    decfuncs -> empty
Rule 36    decfuncs -> func decfuncs
Rule 37    func -> FUNC typefunc
Rule 38    func -> FUNC voidfunc
Rule 39    voidfunc -> VOID ID changecontext LPAREN params RPAREN block
Rule 40    typefunc -> type ID changecontext LPAREN params RPAREN returnblock
Rule 41    params -> empty
Rule 42    params -> type ID COMMA params
Rule 43    params -> type ID
Rule 44    call -> ID LPAREN callvalues RPAREN
Rule 45    callvalues -> empty
Rule 46    callvalues -> exp COMMA callvalues
Rule 47    callvalues -> exp
Rule 48    super_exp_aux -> logic super_exp
Rule 49    super_exp_aux -> empty
Rule 50    super_exp -> expression super_exp_quadgen super_exp_aux
Rule 51    logic -> OR
Rule 52    logic -> AND
Rule 53    super_exp_quadgen -> <empty>
Rule 54    expression_aux -> relation expression
Rule 55    expression_aux -> empty
Rule 56    expression -> exp expression_quadgen expression_aux
Rule 57    relation -> NEQ
Rule 58    relation -> EQ
Rule 59    relation -> LTE
Rule 60    relation -> GTE
Rule 61    relation -> LT
Rule 62    relation -> GT
Rule 63    expression_quadgen -> <empty>
Rule 64    exp_aux -> exp_sign exp
Rule 65    exp_aux -> empty
Rule 66    exp -> term exp_quadgen exp_aux
Rule 67    exp_sign -> MINUS
Rule 68    exp_sign -> PLUS
Rule 69    exp_quadgen -> <empty>
Rule 70    term_aux -> term_sign term
Rule 71    term_aux -> empty
Rule 72    term -> factor term_quadgen term_aux
Rule 73    term_sign -> DIVIDE
Rule 74    term_sign -> TIMES
Rule 75    term_quadgen -> <empty>
Rule 76    factor -> LPAREN fakefloor super_exp RPAREN
Rule 77    factor -> varcte
Rule 78    factor -> call
Rule 79    factor -> var
Rule 80    fakefloor -> <empty>
Rule 81    forloop -> FROM var ASSIGN expression TO expression BY expression DO block
Rule 82    forloop -> FROM var ASSIGN expression TO expression DO block
Rule 83    whileloop -> WHILE LPAREN expression RPAREN block
Rule 84    assignment -> assignment_var assignment_sign expression SEMICOLON
Rule 85    assignment_sign -> ASSIGN
Rule 86    assignment_var -> ID
Rule 87    read -> INPUT LPAREN decvar RPAREN SEMICOLON
Rule 88    write -> PRINT LPAREN writevalues RPAREN SEMICOLON
Rule 89    writevalues -> CTESTRING COMMA writevalues
Rule 90    writevalues -> super_exp COMMA writevalues
Rule 91    writevalues -> CTESTRING
Rule 92    writevalues -> super_exp
Rule 93    condition -> IF LPAREN expression RPAREN block ELSE block
Rule 94    condition -> IF LPAREN expression RPAREN block
Rule 95    varcte -> CTEBOOL
Rule 96    varcte -> CTEFLOAT
Rule 97    varcte -> CTEINT
Rule 98    type -> BOOL
Rule 99    type -> FLOAT
Rule 100   type -> INT
Rule 101   statute -> call
Rule 102   statute -> forloop
Rule 103   statute -> whileloop
Rule 104   statute -> read
Rule 105   statute -> write
Rule 106   statute -> condition
Rule 107   statute -> assignment
Rule 108   changecontext -> <empty>
Rule 109   saveprogramname -> <empty>
Rule 110   empty -> <empty>

Terminals, with rules where they appear:

AND                  : 52
ASSIGN               : 81 82 85
BOOL                 : 14 98
BY                   : 23 81
COMMA                : 12 42 46 89 90
CTEBOOL              : 95
CTEFLOAT             : 96
CTEINT               : 32 32 33 97
CTESTRING            : 89 91
DIVIDE               : 73
DO                   : 22 81 82
ELSE                 : 17 93
EQ                   : 58
FLOAT                : 15 99
FROM                 : 25 81 82
FUNC                 : 28 37 38
GT                   : 62
GTE                  : 60
ID                   : 1 32 33 34 39 40 42 43 44 86
IF                   : 18 93 94
INPUT                : 20 87
INT                  : 16 100
LBRACKET             : 32 32 33
LCURLY               : 4 5
LPAREN               : 3 39 40 44 76 83 87 88 93 94
LT                   : 61
LTE                  : 59
MAIN                 : 3 29
MINUS                : 67
NEQ                  : 57
OR                   : 51
PLUS                 : 68
PRINT                : 19 88
PROGRAM              : 1 31
RBRACKET             : 32 32 33
RCURLY               : 4 5
RETURN               : 5 27
RPAREN               : 3 39 40 44 76 83 87 88 93 94
SEMICOLON            : 5 10 11 84 87 88
TIMES                : 74
TO                   : 24 81 82
VARS                 : 9 30
VOID                 : 26 39
WHILE                : 21 83
error                : 

Nonterminals, with rules where they appear:

assignment           : 107
assignment_sign      : 84
assignment_var       : 84
block                : 3 39 81 82 83 93 93 94
blockcontent         : 4 5 7
call                 : 78 101
callvalues           : 44 46
changecontext        : 3 39 40
condition            : 106
decfuncs             : 2 36
declare              : 1
decvar               : 10 11 12 87
decvar_line          : 9 10
decvars              : 2 4 5
empty                : 6 8 35 41 45 49 55 65 71
exp                  : 5 46 47 56 64
exp_aux              : 66
exp_quadgen          : 66
exp_sign             : 64
expression           : 50 54 81 81 81 82 82 83 84 93 94
expression_aux       : 56
expression_quadgen   : 56
factor               : 72
fakefloor            : 76
forloop              : 102
func                 : 36
logic                : 48
main_block           : 2
params               : 39 40 42
program              : 0
read                 : 104
relation             : 54
returnblock          : 40
saveprogramname      : 1
statute              : 7
super_exp            : 48 76 90 92
super_exp_aux        : 50
super_exp_quadgen    : 50
term                 : 66 70
term_aux             : 72
term_quadgen         : 72
term_sign            : 70
type                 : 10 11 40 42 43
typefunc             : 37
var                  : 12 13 79 81 82
varcte               : 77
voidfunc             : 38
whileloop            : 103
write                : 105
writevalues          : 88 89 90


state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID saveprogramname declare
    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .


state 2

    (1) program -> PROGRAM . ID saveprogramname declare
    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . saveprogramname declare
    (109) saveprogramname -> .
    VARS            reduce using rule 109 (saveprogramname -> .)
    FUNC            reduce using rule 109 (saveprogramname -> .)
    MAIN            reduce using rule 109 (saveprogramname -> .)

    saveprogramname                shift and go to state 4

state 4

    (1) program -> PROGRAM ID saveprogramname . declare
    (2) declare -> . decvars decfuncs main_block
    (8) decvars -> . empty
    (9) decvars -> . VARS decvar_line
    (110) empty -> .
    VARS            shift and go to state 8
    FUNC            reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)

    declare                        shift and go to state 5
    decvars                        shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID saveprogramname declare .
    $end            reduce using rule 1 (program -> PROGRAM ID saveprogramname declare .)


state 6

    (2) declare -> decvars . decfuncs main_block
    (35) decfuncs -> . empty
    (36) decfuncs -> . func decfuncs
    (110) empty -> .
    (37) func -> . FUNC typefunc
    (38) func -> . FUNC voidfunc
    MAIN            reduce using rule 110 (empty -> .)
    FUNC            shift and go to state 12

    decfuncs                       shift and go to state 9
    empty                          shift and go to state 10
    func                           shift and go to state 11

state 7

    (8) decvars -> empty .
    FUNC            reduce using rule 8 (decvars -> empty .)
    MAIN            reduce using rule 8 (decvars -> empty .)
    ID              reduce using rule 8 (decvars -> empty .)
    FROM            reduce using rule 8 (decvars -> empty .)
    WHILE           reduce using rule 8 (decvars -> empty .)
    INPUT           reduce using rule 8 (decvars -> empty .)
    PRINT           reduce using rule 8 (decvars -> empty .)
    IF              reduce using rule 8 (decvars -> empty .)
    RCURLY          reduce using rule 8 (decvars -> empty .)
    RETURN          reduce using rule 8 (decvars -> empty .)


state 8

    (9) decvars -> VARS . decvar_line
    (10) decvar_line -> . type decvar SEMICOLON decvar_line
    (11) decvar_line -> . type decvar SEMICOLON
    (98) type -> . BOOL
    (99) type -> . FLOAT
    (100) type -> . INT
    BOOL            shift and go to state 15
    FLOAT           shift and go to state 16
    INT             shift and go to state 17

    decvar_line                    shift and go to state 13
    type                           shift and go to state 14

state 9

    (2) declare -> decvars decfuncs . main_block
    (3) main_block -> . MAIN changecontext LPAREN RPAREN block
    MAIN            shift and go to state 19

    main_block                     shift and go to state 18

state 10

    (35) decfuncs -> empty .
    MAIN            reduce using rule 35 (decfuncs -> empty .)


state 11

    (36) decfuncs -> func . decfuncs
    (35) decfuncs -> . empty
    (36) decfuncs -> . func decfuncs
    (110) empty -> .
    (37) func -> . FUNC typefunc
    (38) func -> . FUNC voidfunc
    MAIN            reduce using rule 110 (empty -> .)
    FUNC            shift and go to state 12

    func                           shift and go to state 11
    decfuncs                       shift and go to state 20
    empty                          shift and go to state 10

state 12

    (37) func -> FUNC . typefunc
    (38) func -> FUNC . voidfunc
    (40) typefunc -> . type ID changecontext LPAREN params RPAREN returnblock
    (39) voidfunc -> . VOID ID changecontext LPAREN params RPAREN block
    (98) type -> . BOOL
    (99) type -> . FLOAT
    (100) type -> . INT
    VOID            shift and go to state 24
    BOOL            shift and go to state 15
    FLOAT           shift and go to state 16
    INT             shift and go to state 17

    typefunc                       shift and go to state 21
    voidfunc                       shift and go to state 22
    type                           shift and go to state 23

state 13

    (9) decvars -> VARS decvar_line .
    FUNC            reduce using rule 9 (decvars -> VARS decvar_line .)
    MAIN            reduce using rule 9 (decvars -> VARS decvar_line .)
    ID              reduce using rule 9 (decvars -> VARS decvar_line .)
    FROM            reduce using rule 9 (decvars -> VARS decvar_line .)
    WHILE           reduce using rule 9 (decvars -> VARS decvar_line .)
    INPUT           reduce using rule 9 (decvars -> VARS decvar_line .)
    PRINT           reduce using rule 9 (decvars -> VARS decvar_line .)
    IF              reduce using rule 9 (decvars -> VARS decvar_line .)
    RCURLY          reduce using rule 9 (decvars -> VARS decvar_line .)
    RETURN          reduce using rule 9 (decvars -> VARS decvar_line .)


state 14

    (10) decvar_line -> type . decvar SEMICOLON decvar_line
    (11) decvar_line -> type . decvar SEMICOLON
    (12) decvar -> . var COMMA decvar
    (13) decvar -> . var
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44
    ID              shift and go to state 45

    decvar                         shift and go to state 25
    var                            shift and go to state 26

state 15

    (98) type -> BOOL .
    BOOL            reduce using rule 98 (type -> BOOL .)
    FLOAT           reduce using rule 98 (type -> BOOL .)
    INT             reduce using rule 98 (type -> BOOL .)
    ELSE            reduce using rule 98 (type -> BOOL .)
    IF              reduce using rule 98 (type -> BOOL .)
    PRINT           reduce using rule 98 (type -> BOOL .)
    INPUT           reduce using rule 98 (type -> BOOL .)
    WHILE           reduce using rule 98 (type -> BOOL .)
    DO              reduce using rule 98 (type -> BOOL .)
    BY              reduce using rule 98 (type -> BOOL .)
    TO              reduce using rule 98 (type -> BOOL .)
    FROM            reduce using rule 98 (type -> BOOL .)
    VOID            reduce using rule 98 (type -> BOOL .)
    RETURN          reduce using rule 98 (type -> BOOL .)
    FUNC            reduce using rule 98 (type -> BOOL .)
    MAIN            reduce using rule 98 (type -> BOOL .)
    VARS            reduce using rule 98 (type -> BOOL .)
    PROGRAM         reduce using rule 98 (type -> BOOL .)
    ID              reduce using rule 98 (type -> BOOL .)


state 16

    (99) type -> FLOAT .
    BOOL            reduce using rule 99 (type -> FLOAT .)
    FLOAT           reduce using rule 99 (type -> FLOAT .)
    INT             reduce using rule 99 (type -> FLOAT .)
    ELSE            reduce using rule 99 (type -> FLOAT .)
    IF              reduce using rule 99 (type -> FLOAT .)
    PRINT           reduce using rule 99 (type -> FLOAT .)
    INPUT           reduce using rule 99 (type -> FLOAT .)
    WHILE           reduce using rule 99 (type -> FLOAT .)
    DO              reduce using rule 99 (type -> FLOAT .)
    BY              reduce using rule 99 (type -> FLOAT .)
    TO              reduce using rule 99 (type -> FLOAT .)
    FROM            reduce using rule 99 (type -> FLOAT .)
    VOID            reduce using rule 99 (type -> FLOAT .)
    RETURN          reduce using rule 99 (type -> FLOAT .)
    FUNC            reduce using rule 99 (type -> FLOAT .)
    MAIN            reduce using rule 99 (type -> FLOAT .)
    VARS            reduce using rule 99 (type -> FLOAT .)
    PROGRAM         reduce using rule 99 (type -> FLOAT .)
    ID              reduce using rule 99 (type -> FLOAT .)


state 17

    (100) type -> INT .
    BOOL            reduce using rule 100 (type -> INT .)
    FLOAT           reduce using rule 100 (type -> INT .)
    INT             reduce using rule 100 (type -> INT .)
    ELSE            reduce using rule 100 (type -> INT .)
    IF              reduce using rule 100 (type -> INT .)
    PRINT           reduce using rule 100 (type -> INT .)
    INPUT           reduce using rule 100 (type -> INT .)
    WHILE           reduce using rule 100 (type -> INT .)
    DO              reduce using rule 100 (type -> INT .)
    BY              reduce using rule 100 (type -> INT .)
    TO              reduce using rule 100 (type -> INT .)
    FROM            reduce using rule 100 (type -> INT .)
    VOID            reduce using rule 100 (type -> INT .)
    RETURN          reduce using rule 100 (type -> INT .)
    FUNC            reduce using rule 100 (type -> INT .)
    MAIN            reduce using rule 100 (type -> INT .)
    VARS            reduce using rule 100 (type -> INT .)
    PROGRAM         reduce using rule 100 (type -> INT .)
    ID              reduce using rule 100 (type -> INT .)


state 18

    (2) declare -> decvars decfuncs main_block .
    $end            reduce using rule 2 (declare -> decvars decfuncs main_block .)


state 19

    (3) main_block -> MAIN . changecontext LPAREN RPAREN block
    (108) changecontext -> .
    LPAREN          reduce using rule 108 (changecontext -> .)

    changecontext                  shift and go to state 46

state 20

    (36) decfuncs -> func decfuncs .
    MAIN            reduce using rule 36 (decfuncs -> func decfuncs .)


state 21

    (37) func -> FUNC typefunc .
    FUNC            reduce using rule 37 (func -> FUNC typefunc .)
    MAIN            reduce using rule 37 (func -> FUNC typefunc .)


state 22

    (38) func -> FUNC voidfunc .
    FUNC            reduce using rule 38 (func -> FUNC voidfunc .)
    MAIN            reduce using rule 38 (func -> FUNC voidfunc .)


state 23

    (40) typefunc -> type . ID changecontext LPAREN params RPAREN returnblock
    ID              shift and go to state 47


state 24

    (39) voidfunc -> VOID . ID changecontext LPAREN params RPAREN block
    ID              shift and go to state 48


state 25

    (10) decvar_line -> type decvar . SEMICOLON decvar_line
    (11) decvar_line -> type decvar . SEMICOLON
    SEMICOLON       shift and go to state 49


state 26

    (12) decvar -> var . COMMA decvar
    (13) decvar -> var .
    COMMA           shift and go to state 50
    SEMICOLON       reduce using rule 13 (decvar -> var .)
    RPAREN          reduce using rule 13 (decvar -> var .)


state 27

    (14) var -> BOOL .
    COMMA           reduce using rule 14 (var -> BOOL .)
    SEMICOLON       reduce using rule 14 (var -> BOOL .)
    RPAREN          reduce using rule 14 (var -> BOOL .)
    ASSIGN          reduce using rule 14 (var -> BOOL .)
    DIVIDE          reduce using rule 14 (var -> BOOL .)
    TIMES           reduce using rule 14 (var -> BOOL .)
    MINUS           reduce using rule 14 (var -> BOOL .)
    PLUS            reduce using rule 14 (var -> BOOL .)
    NEQ             reduce using rule 14 (var -> BOOL .)
    EQ              reduce using rule 14 (var -> BOOL .)
    LTE             reduce using rule 14 (var -> BOOL .)
    GTE             reduce using rule 14 (var -> BOOL .)
    LT              reduce using rule 14 (var -> BOOL .)
    GT              reduce using rule 14 (var -> BOOL .)
    OR              reduce using rule 14 (var -> BOOL .)
    AND             reduce using rule 14 (var -> BOOL .)
    TO              reduce using rule 14 (var -> BOOL .)
    BY              reduce using rule 14 (var -> BOOL .)
    DO              reduce using rule 14 (var -> BOOL .)


state 28

    (15) var -> FLOAT .
    COMMA           reduce using rule 15 (var -> FLOAT .)
    SEMICOLON       reduce using rule 15 (var -> FLOAT .)
    RPAREN          reduce using rule 15 (var -> FLOAT .)
    ASSIGN          reduce using rule 15 (var -> FLOAT .)
    DIVIDE          reduce using rule 15 (var -> FLOAT .)
    TIMES           reduce using rule 15 (var -> FLOAT .)
    MINUS           reduce using rule 15 (var -> FLOAT .)
    PLUS            reduce using rule 15 (var -> FLOAT .)
    NEQ             reduce using rule 15 (var -> FLOAT .)
    EQ              reduce using rule 15 (var -> FLOAT .)
    LTE             reduce using rule 15 (var -> FLOAT .)
    GTE             reduce using rule 15 (var -> FLOAT .)
    LT              reduce using rule 15 (var -> FLOAT .)
    GT              reduce using rule 15 (var -> FLOAT .)
    OR              reduce using rule 15 (var -> FLOAT .)
    AND             reduce using rule 15 (var -> FLOAT .)
    TO              reduce using rule 15 (var -> FLOAT .)
    BY              reduce using rule 15 (var -> FLOAT .)
    DO              reduce using rule 15 (var -> FLOAT .)


state 29

    (16) var -> INT .
    COMMA           reduce using rule 16 (var -> INT .)
    SEMICOLON       reduce using rule 16 (var -> INT .)
    RPAREN          reduce using rule 16 (var -> INT .)
    ASSIGN          reduce using rule 16 (var -> INT .)
    DIVIDE          reduce using rule 16 (var -> INT .)
    TIMES           reduce using rule 16 (var -> INT .)
    MINUS           reduce using rule 16 (var -> INT .)
    PLUS            reduce using rule 16 (var -> INT .)
    NEQ             reduce using rule 16 (var -> INT .)
    EQ              reduce using rule 16 (var -> INT .)
    LTE             reduce using rule 16 (var -> INT .)
    GTE             reduce using rule 16 (var -> INT .)
    LT              reduce using rule 16 (var -> INT .)
    GT              reduce using rule 16 (var -> INT .)
    OR              reduce using rule 16 (var -> INT .)
    AND             reduce using rule 16 (var -> INT .)
    TO              reduce using rule 16 (var -> INT .)
    BY              reduce using rule 16 (var -> INT .)
    DO              reduce using rule 16 (var -> INT .)


state 30

    (17) var -> ELSE .
    COMMA           reduce using rule 17 (var -> ELSE .)
    SEMICOLON       reduce using rule 17 (var -> ELSE .)
    RPAREN          reduce using rule 17 (var -> ELSE .)
    ASSIGN          reduce using rule 17 (var -> ELSE .)
    DIVIDE          reduce using rule 17 (var -> ELSE .)
    TIMES           reduce using rule 17 (var -> ELSE .)
    MINUS           reduce using rule 17 (var -> ELSE .)
    PLUS            reduce using rule 17 (var -> ELSE .)
    NEQ             reduce using rule 17 (var -> ELSE .)
    EQ              reduce using rule 17 (var -> ELSE .)
    LTE             reduce using rule 17 (var -> ELSE .)
    GTE             reduce using rule 17 (var -> ELSE .)
    LT              reduce using rule 17 (var -> ELSE .)
    GT              reduce using rule 17 (var -> ELSE .)
    OR              reduce using rule 17 (var -> ELSE .)
    AND             reduce using rule 17 (var -> ELSE .)
    TO              reduce using rule 17 (var -> ELSE .)
    BY              reduce using rule 17 (var -> ELSE .)
    DO              reduce using rule 17 (var -> ELSE .)


state 31

    (18) var -> IF .
    COMMA           reduce using rule 18 (var -> IF .)
    SEMICOLON       reduce using rule 18 (var -> IF .)
    RPAREN          reduce using rule 18 (var -> IF .)
    ASSIGN          reduce using rule 18 (var -> IF .)
    DIVIDE          reduce using rule 18 (var -> IF .)
    TIMES           reduce using rule 18 (var -> IF .)
    MINUS           reduce using rule 18 (var -> IF .)
    PLUS            reduce using rule 18 (var -> IF .)
    NEQ             reduce using rule 18 (var -> IF .)
    EQ              reduce using rule 18 (var -> IF .)
    LTE             reduce using rule 18 (var -> IF .)
    GTE             reduce using rule 18 (var -> IF .)
    LT              reduce using rule 18 (var -> IF .)
    GT              reduce using rule 18 (var -> IF .)
    OR              reduce using rule 18 (var -> IF .)
    AND             reduce using rule 18 (var -> IF .)
    TO              reduce using rule 18 (var -> IF .)
    BY              reduce using rule 18 (var -> IF .)
    DO              reduce using rule 18 (var -> IF .)


state 32

    (19) var -> PRINT .
    COMMA           reduce using rule 19 (var -> PRINT .)
    SEMICOLON       reduce using rule 19 (var -> PRINT .)
    RPAREN          reduce using rule 19 (var -> PRINT .)
    ASSIGN          reduce using rule 19 (var -> PRINT .)
    DIVIDE          reduce using rule 19 (var -> PRINT .)
    TIMES           reduce using rule 19 (var -> PRINT .)
    MINUS           reduce using rule 19 (var -> PRINT .)
    PLUS            reduce using rule 19 (var -> PRINT .)
    NEQ             reduce using rule 19 (var -> PRINT .)
    EQ              reduce using rule 19 (var -> PRINT .)
    LTE             reduce using rule 19 (var -> PRINT .)
    GTE             reduce using rule 19 (var -> PRINT .)
    LT              reduce using rule 19 (var -> PRINT .)
    GT              reduce using rule 19 (var -> PRINT .)
    OR              reduce using rule 19 (var -> PRINT .)
    AND             reduce using rule 19 (var -> PRINT .)
    TO              reduce using rule 19 (var -> PRINT .)
    BY              reduce using rule 19 (var -> PRINT .)
    DO              reduce using rule 19 (var -> PRINT .)


state 33

    (20) var -> INPUT .
    COMMA           reduce using rule 20 (var -> INPUT .)
    SEMICOLON       reduce using rule 20 (var -> INPUT .)
    RPAREN          reduce using rule 20 (var -> INPUT .)
    ASSIGN          reduce using rule 20 (var -> INPUT .)
    DIVIDE          reduce using rule 20 (var -> INPUT .)
    TIMES           reduce using rule 20 (var -> INPUT .)
    MINUS           reduce using rule 20 (var -> INPUT .)
    PLUS            reduce using rule 20 (var -> INPUT .)
    NEQ             reduce using rule 20 (var -> INPUT .)
    EQ              reduce using rule 20 (var -> INPUT .)
    LTE             reduce using rule 20 (var -> INPUT .)
    GTE             reduce using rule 20 (var -> INPUT .)
    LT              reduce using rule 20 (var -> INPUT .)
    GT              reduce using rule 20 (var -> INPUT .)
    OR              reduce using rule 20 (var -> INPUT .)
    AND             reduce using rule 20 (var -> INPUT .)
    TO              reduce using rule 20 (var -> INPUT .)
    BY              reduce using rule 20 (var -> INPUT .)
    DO              reduce using rule 20 (var -> INPUT .)


state 34

    (21) var -> WHILE .
    COMMA           reduce using rule 21 (var -> WHILE .)
    SEMICOLON       reduce using rule 21 (var -> WHILE .)
    RPAREN          reduce using rule 21 (var -> WHILE .)
    ASSIGN          reduce using rule 21 (var -> WHILE .)
    DIVIDE          reduce using rule 21 (var -> WHILE .)
    TIMES           reduce using rule 21 (var -> WHILE .)
    MINUS           reduce using rule 21 (var -> WHILE .)
    PLUS            reduce using rule 21 (var -> WHILE .)
    NEQ             reduce using rule 21 (var -> WHILE .)
    EQ              reduce using rule 21 (var -> WHILE .)
    LTE             reduce using rule 21 (var -> WHILE .)
    GTE             reduce using rule 21 (var -> WHILE .)
    LT              reduce using rule 21 (var -> WHILE .)
    GT              reduce using rule 21 (var -> WHILE .)
    OR              reduce using rule 21 (var -> WHILE .)
    AND             reduce using rule 21 (var -> WHILE .)
    TO              reduce using rule 21 (var -> WHILE .)
    BY              reduce using rule 21 (var -> WHILE .)
    DO              reduce using rule 21 (var -> WHILE .)


state 35

    (22) var -> DO .
    COMMA           reduce using rule 22 (var -> DO .)
    SEMICOLON       reduce using rule 22 (var -> DO .)
    RPAREN          reduce using rule 22 (var -> DO .)
    ASSIGN          reduce using rule 22 (var -> DO .)
    DIVIDE          reduce using rule 22 (var -> DO .)
    TIMES           reduce using rule 22 (var -> DO .)
    MINUS           reduce using rule 22 (var -> DO .)
    PLUS            reduce using rule 22 (var -> DO .)
    NEQ             reduce using rule 22 (var -> DO .)
    EQ              reduce using rule 22 (var -> DO .)
    LTE             reduce using rule 22 (var -> DO .)
    GTE             reduce using rule 22 (var -> DO .)
    LT              reduce using rule 22 (var -> DO .)
    GT              reduce using rule 22 (var -> DO .)
    OR              reduce using rule 22 (var -> DO .)
    AND             reduce using rule 22 (var -> DO .)
    TO              reduce using rule 22 (var -> DO .)
    BY              reduce using rule 22 (var -> DO .)
    DO              reduce using rule 22 (var -> DO .)


state 36

    (23) var -> BY .
    COMMA           reduce using rule 23 (var -> BY .)
    SEMICOLON       reduce using rule 23 (var -> BY .)
    RPAREN          reduce using rule 23 (var -> BY .)
    ASSIGN          reduce using rule 23 (var -> BY .)
    DIVIDE          reduce using rule 23 (var -> BY .)
    TIMES           reduce using rule 23 (var -> BY .)
    MINUS           reduce using rule 23 (var -> BY .)
    PLUS            reduce using rule 23 (var -> BY .)
    NEQ             reduce using rule 23 (var -> BY .)
    EQ              reduce using rule 23 (var -> BY .)
    LTE             reduce using rule 23 (var -> BY .)
    GTE             reduce using rule 23 (var -> BY .)
    LT              reduce using rule 23 (var -> BY .)
    GT              reduce using rule 23 (var -> BY .)
    OR              reduce using rule 23 (var -> BY .)
    AND             reduce using rule 23 (var -> BY .)
    TO              reduce using rule 23 (var -> BY .)
    BY              reduce using rule 23 (var -> BY .)
    DO              reduce using rule 23 (var -> BY .)


state 37

    (24) var -> TO .
    COMMA           reduce using rule 24 (var -> TO .)
    SEMICOLON       reduce using rule 24 (var -> TO .)
    RPAREN          reduce using rule 24 (var -> TO .)
    ASSIGN          reduce using rule 24 (var -> TO .)
    DIVIDE          reduce using rule 24 (var -> TO .)
    TIMES           reduce using rule 24 (var -> TO .)
    MINUS           reduce using rule 24 (var -> TO .)
    PLUS            reduce using rule 24 (var -> TO .)
    NEQ             reduce using rule 24 (var -> TO .)
    EQ              reduce using rule 24 (var -> TO .)
    LTE             reduce using rule 24 (var -> TO .)
    GTE             reduce using rule 24 (var -> TO .)
    LT              reduce using rule 24 (var -> TO .)
    GT              reduce using rule 24 (var -> TO .)
    OR              reduce using rule 24 (var -> TO .)
    AND             reduce using rule 24 (var -> TO .)
    TO              reduce using rule 24 (var -> TO .)
    BY              reduce using rule 24 (var -> TO .)
    DO              reduce using rule 24 (var -> TO .)


state 38

    (25) var -> FROM .
    COMMA           reduce using rule 25 (var -> FROM .)
    SEMICOLON       reduce using rule 25 (var -> FROM .)
    RPAREN          reduce using rule 25 (var -> FROM .)
    ASSIGN          reduce using rule 25 (var -> FROM .)
    DIVIDE          reduce using rule 25 (var -> FROM .)
    TIMES           reduce using rule 25 (var -> FROM .)
    MINUS           reduce using rule 25 (var -> FROM .)
    PLUS            reduce using rule 25 (var -> FROM .)
    NEQ             reduce using rule 25 (var -> FROM .)
    EQ              reduce using rule 25 (var -> FROM .)
    LTE             reduce using rule 25 (var -> FROM .)
    GTE             reduce using rule 25 (var -> FROM .)
    LT              reduce using rule 25 (var -> FROM .)
    GT              reduce using rule 25 (var -> FROM .)
    OR              reduce using rule 25 (var -> FROM .)
    AND             reduce using rule 25 (var -> FROM .)
    TO              reduce using rule 25 (var -> FROM .)
    BY              reduce using rule 25 (var -> FROM .)
    DO              reduce using rule 25 (var -> FROM .)


state 39

    (26) var -> VOID .
    COMMA           reduce using rule 26 (var -> VOID .)
    SEMICOLON       reduce using rule 26 (var -> VOID .)
    RPAREN          reduce using rule 26 (var -> VOID .)
    ASSIGN          reduce using rule 26 (var -> VOID .)
    DIVIDE          reduce using rule 26 (var -> VOID .)
    TIMES           reduce using rule 26 (var -> VOID .)
    MINUS           reduce using rule 26 (var -> VOID .)
    PLUS            reduce using rule 26 (var -> VOID .)
    NEQ             reduce using rule 26 (var -> VOID .)
    EQ              reduce using rule 26 (var -> VOID .)
    LTE             reduce using rule 26 (var -> VOID .)
    GTE             reduce using rule 26 (var -> VOID .)
    LT              reduce using rule 26 (var -> VOID .)
    GT              reduce using rule 26 (var -> VOID .)
    OR              reduce using rule 26 (var -> VOID .)
    AND             reduce using rule 26 (var -> VOID .)
    TO              reduce using rule 26 (var -> VOID .)
    BY              reduce using rule 26 (var -> VOID .)
    DO              reduce using rule 26 (var -> VOID .)


state 40

    (27) var -> RETURN .
    COMMA           reduce using rule 27 (var -> RETURN .)
    SEMICOLON       reduce using rule 27 (var -> RETURN .)
    RPAREN          reduce using rule 27 (var -> RETURN .)
    ASSIGN          reduce using rule 27 (var -> RETURN .)
    DIVIDE          reduce using rule 27 (var -> RETURN .)
    TIMES           reduce using rule 27 (var -> RETURN .)
    MINUS           reduce using rule 27 (var -> RETURN .)
    PLUS            reduce using rule 27 (var -> RETURN .)
    NEQ             reduce using rule 27 (var -> RETURN .)
    EQ              reduce using rule 27 (var -> RETURN .)
    LTE             reduce using rule 27 (var -> RETURN .)
    GTE             reduce using rule 27 (var -> RETURN .)
    LT              reduce using rule 27 (var -> RETURN .)
    GT              reduce using rule 27 (var -> RETURN .)
    OR              reduce using rule 27 (var -> RETURN .)
    AND             reduce using rule 27 (var -> RETURN .)
    TO              reduce using rule 27 (var -> RETURN .)
    BY              reduce using rule 27 (var -> RETURN .)
    DO              reduce using rule 27 (var -> RETURN .)


state 41

    (28) var -> FUNC .
    COMMA           reduce using rule 28 (var -> FUNC .)
    SEMICOLON       reduce using rule 28 (var -> FUNC .)
    RPAREN          reduce using rule 28 (var -> FUNC .)
    ASSIGN          reduce using rule 28 (var -> FUNC .)
    DIVIDE          reduce using rule 28 (var -> FUNC .)
    TIMES           reduce using rule 28 (var -> FUNC .)
    MINUS           reduce using rule 28 (var -> FUNC .)
    PLUS            reduce using rule 28 (var -> FUNC .)
    NEQ             reduce using rule 28 (var -> FUNC .)
    EQ              reduce using rule 28 (var -> FUNC .)
    LTE             reduce using rule 28 (var -> FUNC .)
    GTE             reduce using rule 28 (var -> FUNC .)
    LT              reduce using rule 28 (var -> FUNC .)
    GT              reduce using rule 28 (var -> FUNC .)
    OR              reduce using rule 28 (var -> FUNC .)
    AND             reduce using rule 28 (var -> FUNC .)
    TO              reduce using rule 28 (var -> FUNC .)
    BY              reduce using rule 28 (var -> FUNC .)
    DO              reduce using rule 28 (var -> FUNC .)


state 42

    (29) var -> MAIN .
    COMMA           reduce using rule 29 (var -> MAIN .)
    SEMICOLON       reduce using rule 29 (var -> MAIN .)
    RPAREN          reduce using rule 29 (var -> MAIN .)
    ASSIGN          reduce using rule 29 (var -> MAIN .)
    DIVIDE          reduce using rule 29 (var -> MAIN .)
    TIMES           reduce using rule 29 (var -> MAIN .)
    MINUS           reduce using rule 29 (var -> MAIN .)
    PLUS            reduce using rule 29 (var -> MAIN .)
    NEQ             reduce using rule 29 (var -> MAIN .)
    EQ              reduce using rule 29 (var -> MAIN .)
    LTE             reduce using rule 29 (var -> MAIN .)
    GTE             reduce using rule 29 (var -> MAIN .)
    LT              reduce using rule 29 (var -> MAIN .)
    GT              reduce using rule 29 (var -> MAIN .)
    OR              reduce using rule 29 (var -> MAIN .)
    AND             reduce using rule 29 (var -> MAIN .)
    TO              reduce using rule 29 (var -> MAIN .)
    BY              reduce using rule 29 (var -> MAIN .)
    DO              reduce using rule 29 (var -> MAIN .)


state 43

    (30) var -> VARS .
    COMMA           reduce using rule 30 (var -> VARS .)
    SEMICOLON       reduce using rule 30 (var -> VARS .)
    RPAREN          reduce using rule 30 (var -> VARS .)
    ASSIGN          reduce using rule 30 (var -> VARS .)
    DIVIDE          reduce using rule 30 (var -> VARS .)
    TIMES           reduce using rule 30 (var -> VARS .)
    MINUS           reduce using rule 30 (var -> VARS .)
    PLUS            reduce using rule 30 (var -> VARS .)
    NEQ             reduce using rule 30 (var -> VARS .)
    EQ              reduce using rule 30 (var -> VARS .)
    LTE             reduce using rule 30 (var -> VARS .)
    GTE             reduce using rule 30 (var -> VARS .)
    LT              reduce using rule 30 (var -> VARS .)
    GT              reduce using rule 30 (var -> VARS .)
    OR              reduce using rule 30 (var -> VARS .)
    AND             reduce using rule 30 (var -> VARS .)
    TO              reduce using rule 30 (var -> VARS .)
    BY              reduce using rule 30 (var -> VARS .)
    DO              reduce using rule 30 (var -> VARS .)


state 44

    (31) var -> PROGRAM .
    COMMA           reduce using rule 31 (var -> PROGRAM .)
    SEMICOLON       reduce using rule 31 (var -> PROGRAM .)
    RPAREN          reduce using rule 31 (var -> PROGRAM .)
    ASSIGN          reduce using rule 31 (var -> PROGRAM .)
    DIVIDE          reduce using rule 31 (var -> PROGRAM .)
    TIMES           reduce using rule 31 (var -> PROGRAM .)
    MINUS           reduce using rule 31 (var -> PROGRAM .)
    PLUS            reduce using rule 31 (var -> PROGRAM .)
    NEQ             reduce using rule 31 (var -> PROGRAM .)
    EQ              reduce using rule 31 (var -> PROGRAM .)
    LTE             reduce using rule 31 (var -> PROGRAM .)
    GTE             reduce using rule 31 (var -> PROGRAM .)
    LT              reduce using rule 31 (var -> PROGRAM .)
    GT              reduce using rule 31 (var -> PROGRAM .)
    OR              reduce using rule 31 (var -> PROGRAM .)
    AND             reduce using rule 31 (var -> PROGRAM .)
    TO              reduce using rule 31 (var -> PROGRAM .)
    BY              reduce using rule 31 (var -> PROGRAM .)
    DO              reduce using rule 31 (var -> PROGRAM .)


state 45

    (32) var -> ID . LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> ID . LBRACKET CTEINT RBRACKET
    (34) var -> ID .
    LBRACKET        shift and go to state 51
    COMMA           reduce using rule 34 (var -> ID .)
    SEMICOLON       reduce using rule 34 (var -> ID .)
    RPAREN          reduce using rule 34 (var -> ID .)
    ASSIGN          reduce using rule 34 (var -> ID .)


state 46

    (3) main_block -> MAIN changecontext . LPAREN RPAREN block
    LPAREN          shift and go to state 52


state 47

    (40) typefunc -> type ID . changecontext LPAREN params RPAREN returnblock
    (108) changecontext -> .
    LPAREN          reduce using rule 108 (changecontext -> .)

    changecontext                  shift and go to state 53

state 48

    (39) voidfunc -> VOID ID . changecontext LPAREN params RPAREN block
    (108) changecontext -> .
    LPAREN          reduce using rule 108 (changecontext -> .)

    changecontext                  shift and go to state 54

state 49

    (10) decvar_line -> type decvar SEMICOLON . decvar_line
    (11) decvar_line -> type decvar SEMICOLON .
    (10) decvar_line -> . type decvar SEMICOLON decvar_line
    (11) decvar_line -> . type decvar SEMICOLON
    (98) type -> . BOOL
    (99) type -> . FLOAT
    (100) type -> . INT
    FUNC            reduce using rule 11 (decvar_line -> type decvar SEMICOLON .)
    MAIN            reduce using rule 11 (decvar_line -> type decvar SEMICOLON .)
    ID              reduce using rule 11 (decvar_line -> type decvar SEMICOLON .)
    FROM            reduce using rule 11 (decvar_line -> type decvar SEMICOLON .)
    WHILE           reduce using rule 11 (decvar_line -> type decvar SEMICOLON .)
    INPUT           reduce using rule 11 (decvar_line -> type decvar SEMICOLON .)
    PRINT           reduce using rule 11 (decvar_line -> type decvar SEMICOLON .)
    IF              reduce using rule 11 (decvar_line -> type decvar SEMICOLON .)
    RCURLY          reduce using rule 11 (decvar_line -> type decvar SEMICOLON .)
    RETURN          reduce using rule 11 (decvar_line -> type decvar SEMICOLON .)
    BOOL            shift and go to state 15
    FLOAT           shift and go to state 16
    INT             shift and go to state 17

    type                           shift and go to state 14
    decvar_line                    shift and go to state 55

state 50

    (12) decvar -> var COMMA . decvar
    (12) decvar -> . var COMMA decvar
    (13) decvar -> . var
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44
    ID              shift and go to state 45

    var                            shift and go to state 26
    decvar                         shift and go to state 56

state 51

    (32) var -> ID LBRACKET . CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> ID LBRACKET . CTEINT RBRACKET
    CTEINT          shift and go to state 57


state 52

    (3) main_block -> MAIN changecontext LPAREN . RPAREN block
    RPAREN          shift and go to state 58


state 53

    (40) typefunc -> type ID changecontext . LPAREN params RPAREN returnblock
    LPAREN          shift and go to state 59


state 54

    (39) voidfunc -> VOID ID changecontext . LPAREN params RPAREN block
    LPAREN          shift and go to state 60


state 55

    (10) decvar_line -> type decvar SEMICOLON decvar_line .
    FUNC            reduce using rule 10 (decvar_line -> type decvar SEMICOLON decvar_line .)
    MAIN            reduce using rule 10 (decvar_line -> type decvar SEMICOLON decvar_line .)
    ID              reduce using rule 10 (decvar_line -> type decvar SEMICOLON decvar_line .)
    FROM            reduce using rule 10 (decvar_line -> type decvar SEMICOLON decvar_line .)
    WHILE           reduce using rule 10 (decvar_line -> type decvar SEMICOLON decvar_line .)
    INPUT           reduce using rule 10 (decvar_line -> type decvar SEMICOLON decvar_line .)
    PRINT           reduce using rule 10 (decvar_line -> type decvar SEMICOLON decvar_line .)
    IF              reduce using rule 10 (decvar_line -> type decvar SEMICOLON decvar_line .)
    RCURLY          reduce using rule 10 (decvar_line -> type decvar SEMICOLON decvar_line .)
    RETURN          reduce using rule 10 (decvar_line -> type decvar SEMICOLON decvar_line .)


state 56

    (12) decvar -> var COMMA decvar .
    SEMICOLON       reduce using rule 12 (decvar -> var COMMA decvar .)
    RPAREN          reduce using rule 12 (decvar -> var COMMA decvar .)


state 57

    (32) var -> ID LBRACKET CTEINT . RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> ID LBRACKET CTEINT . RBRACKET
    RBRACKET        shift and go to state 61


state 58

    (3) main_block -> MAIN changecontext LPAREN RPAREN . block
    (4) block -> . LCURLY decvars blockcontent RCURLY
    LCURLY          shift and go to state 63

    block                          shift and go to state 62

state 59

    (40) typefunc -> type ID changecontext LPAREN . params RPAREN returnblock
    (41) params -> . empty
    (42) params -> . type ID COMMA params
    (43) params -> . type ID
    (110) empty -> .
    (98) type -> . BOOL
    (99) type -> . FLOAT
    (100) type -> . INT
    RPAREN          reduce using rule 110 (empty -> .)
    BOOL            shift and go to state 15
    FLOAT           shift and go to state 16
    INT             shift and go to state 17

    type                           shift and go to state 64
    params                         shift and go to state 65
    empty                          shift and go to state 66

state 60

    (39) voidfunc -> VOID ID changecontext LPAREN . params RPAREN block
    (41) params -> . empty
    (42) params -> . type ID COMMA params
    (43) params -> . type ID
    (110) empty -> .
    (98) type -> . BOOL
    (99) type -> . FLOAT
    (100) type -> . INT
    RPAREN          reduce using rule 110 (empty -> .)
    BOOL            shift and go to state 15
    FLOAT           shift and go to state 16
    INT             shift and go to state 17

    params                         shift and go to state 67
    empty                          shift and go to state 66
    type                           shift and go to state 64

state 61

    (32) var -> ID LBRACKET CTEINT RBRACKET . LBRACKET CTEINT RBRACKET
    (33) var -> ID LBRACKET CTEINT RBRACKET .
    LBRACKET        shift and go to state 68
    COMMA           reduce using rule 33 (var -> ID LBRACKET CTEINT RBRACKET .)
    SEMICOLON       reduce using rule 33 (var -> ID LBRACKET CTEINT RBRACKET .)
    RPAREN          reduce using rule 33 (var -> ID LBRACKET CTEINT RBRACKET .)
    ASSIGN          reduce using rule 33 (var -> ID LBRACKET CTEINT RBRACKET .)
    DIVIDE          reduce using rule 33 (var -> ID LBRACKET CTEINT RBRACKET .)
    TIMES           reduce using rule 33 (var -> ID LBRACKET CTEINT RBRACKET .)
    MINUS           reduce using rule 33 (var -> ID LBRACKET CTEINT RBRACKET .)
    PLUS            reduce using rule 33 (var -> ID LBRACKET CTEINT RBRACKET .)
    NEQ             reduce using rule 33 (var -> ID LBRACKET CTEINT RBRACKET .)
    EQ              reduce using rule 33 (var -> ID LBRACKET CTEINT RBRACKET .)
    LTE             reduce using rule 33 (var -> ID LBRACKET CTEINT RBRACKET .)
    GTE             reduce using rule 33 (var -> ID LBRACKET CTEINT RBRACKET .)
    LT              reduce using rule 33 (var -> ID LBRACKET CTEINT RBRACKET .)
    GT              reduce using rule 33 (var -> ID LBRACKET CTEINT RBRACKET .)
    OR              reduce using rule 33 (var -> ID LBRACKET CTEINT RBRACKET .)
    AND             reduce using rule 33 (var -> ID LBRACKET CTEINT RBRACKET .)
    TO              reduce using rule 33 (var -> ID LBRACKET CTEINT RBRACKET .)
    BY              reduce using rule 33 (var -> ID LBRACKET CTEINT RBRACKET .)
    DO              reduce using rule 33 (var -> ID LBRACKET CTEINT RBRACKET .)


state 62

    (3) main_block -> MAIN changecontext LPAREN RPAREN block .
    $end            reduce using rule 3 (main_block -> MAIN changecontext LPAREN RPAREN block .)


state 63

    (4) block -> LCURLY . decvars blockcontent RCURLY
    (8) decvars -> . empty
    (9) decvars -> . VARS decvar_line
    (110) empty -> .
    VARS            shift and go to state 8
    ID              reduce using rule 110 (empty -> .)
    FROM            reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    INPUT           reduce using rule 110 (empty -> .)
    PRINT           reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    RCURLY          reduce using rule 110 (empty -> .)

    decvars                        shift and go to state 69
    empty                          shift and go to state 7

state 64

    (42) params -> type . ID COMMA params
    (43) params -> type . ID
    ID              shift and go to state 70


state 65

    (40) typefunc -> type ID changecontext LPAREN params . RPAREN returnblock
    RPAREN          shift and go to state 71


state 66

    (41) params -> empty .
    RPAREN          reduce using rule 41 (params -> empty .)


state 67

    (39) voidfunc -> VOID ID changecontext LPAREN params . RPAREN block
    RPAREN          shift and go to state 72


state 68

    (32) var -> ID LBRACKET CTEINT RBRACKET LBRACKET . CTEINT RBRACKET
    CTEINT          shift and go to state 73


state 69

    (4) block -> LCURLY decvars . blockcontent RCURLY
    (6) blockcontent -> . empty
    (7) blockcontent -> . statute blockcontent
    (110) empty -> .
    (101) statute -> . call
    (102) statute -> . forloop
    (103) statute -> . whileloop
    (104) statute -> . read
    (105) statute -> . write
    (106) statute -> . condition
    (107) statute -> . assignment
    (44) call -> . ID LPAREN callvalues RPAREN
    (81) forloop -> . FROM var ASSIGN expression TO expression BY expression DO block
    (82) forloop -> . FROM var ASSIGN expression TO expression DO block
    (83) whileloop -> . WHILE LPAREN expression RPAREN block
    (87) read -> . INPUT LPAREN decvar RPAREN SEMICOLON
    (88) write -> . PRINT LPAREN writevalues RPAREN SEMICOLON
    (93) condition -> . IF LPAREN expression RPAREN block ELSE block
    (94) condition -> . IF LPAREN expression RPAREN block
    (84) assignment -> . assignment_var assignment_sign expression SEMICOLON
    (86) assignment_var -> . ID
    RCURLY          reduce using rule 110 (empty -> .)
    ID              shift and go to state 84
    FROM            shift and go to state 85
    WHILE           shift and go to state 86
    INPUT           shift and go to state 87
    PRINT           shift and go to state 88
    IF              shift and go to state 89

    blockcontent                   shift and go to state 74
    empty                          shift and go to state 75
    statute                        shift and go to state 76
    call                           shift and go to state 77
    forloop                        shift and go to state 78
    whileloop                      shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    condition                      shift and go to state 82
    assignment                     shift and go to state 83
    assignment_var                 shift and go to state 90

state 70

    (42) params -> type ID . COMMA params
    (43) params -> type ID .
    COMMA           shift and go to state 91
    RPAREN          reduce using rule 43 (params -> type ID .)


state 71

    (40) typefunc -> type ID changecontext LPAREN params RPAREN . returnblock
    (5) returnblock -> . LCURLY decvars blockcontent RETURN exp SEMICOLON RCURLY
    LCURLY          shift and go to state 93

    returnblock                    shift and go to state 92

state 72

    (39) voidfunc -> VOID ID changecontext LPAREN params RPAREN . block
    (4) block -> . LCURLY decvars blockcontent RCURLY
    LCURLY          shift and go to state 63

    block                          shift and go to state 94

state 73

    (32) var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT . RBRACKET
    RBRACKET        shift and go to state 95


state 74

    (4) block -> LCURLY decvars blockcontent . RCURLY
    RCURLY          shift and go to state 96


state 75

    (6) blockcontent -> empty .
    RCURLY          reduce using rule 6 (blockcontent -> empty .)
    RETURN          reduce using rule 6 (blockcontent -> empty .)


state 76

    (7) blockcontent -> statute . blockcontent
    (6) blockcontent -> . empty
    (7) blockcontent -> . statute blockcontent
    (110) empty -> .
    (101) statute -> . call
    (102) statute -> . forloop
    (103) statute -> . whileloop
    (104) statute -> . read
    (105) statute -> . write
    (106) statute -> . condition
    (107) statute -> . assignment
    (44) call -> . ID LPAREN callvalues RPAREN
    (81) forloop -> . FROM var ASSIGN expression TO expression BY expression DO block
    (82) forloop -> . FROM var ASSIGN expression TO expression DO block
    (83) whileloop -> . WHILE LPAREN expression RPAREN block
    (87) read -> . INPUT LPAREN decvar RPAREN SEMICOLON
    (88) write -> . PRINT LPAREN writevalues RPAREN SEMICOLON
    (93) condition -> . IF LPAREN expression RPAREN block ELSE block
    (94) condition -> . IF LPAREN expression RPAREN block
    (84) assignment -> . assignment_var assignment_sign expression SEMICOLON
    (86) assignment_var -> . ID
    RCURLY          reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)
    ID              shift and go to state 84
    FROM            shift and go to state 85
    WHILE           shift and go to state 86
    INPUT           shift and go to state 87
    PRINT           shift and go to state 88
    IF              shift and go to state 89

    statute                        shift and go to state 76
    blockcontent                   shift and go to state 97
    empty                          shift and go to state 75
    call                           shift and go to state 77
    forloop                        shift and go to state 78
    whileloop                      shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    condition                      shift and go to state 82
    assignment                     shift and go to state 83
    assignment_var                 shift and go to state 90

state 77

    (101) statute -> call .
    ID              reduce using rule 101 (statute -> call .)
    FROM            reduce using rule 101 (statute -> call .)
    WHILE           reduce using rule 101 (statute -> call .)
    INPUT           reduce using rule 101 (statute -> call .)
    PRINT           reduce using rule 101 (statute -> call .)
    IF              reduce using rule 101 (statute -> call .)
    RCURLY          reduce using rule 101 (statute -> call .)
    RETURN          reduce using rule 101 (statute -> call .)


state 78

    (102) statute -> forloop .
    ID              reduce using rule 102 (statute -> forloop .)
    FROM            reduce using rule 102 (statute -> forloop .)
    WHILE           reduce using rule 102 (statute -> forloop .)
    INPUT           reduce using rule 102 (statute -> forloop .)
    PRINT           reduce using rule 102 (statute -> forloop .)
    IF              reduce using rule 102 (statute -> forloop .)
    RCURLY          reduce using rule 102 (statute -> forloop .)
    RETURN          reduce using rule 102 (statute -> forloop .)


state 79

    (103) statute -> whileloop .
    ID              reduce using rule 103 (statute -> whileloop .)
    FROM            reduce using rule 103 (statute -> whileloop .)
    WHILE           reduce using rule 103 (statute -> whileloop .)
    INPUT           reduce using rule 103 (statute -> whileloop .)
    PRINT           reduce using rule 103 (statute -> whileloop .)
    IF              reduce using rule 103 (statute -> whileloop .)
    RCURLY          reduce using rule 103 (statute -> whileloop .)
    RETURN          reduce using rule 103 (statute -> whileloop .)


state 80

    (104) statute -> read .
    ID              reduce using rule 104 (statute -> read .)
    FROM            reduce using rule 104 (statute -> read .)
    WHILE           reduce using rule 104 (statute -> read .)
    INPUT           reduce using rule 104 (statute -> read .)
    PRINT           reduce using rule 104 (statute -> read .)
    IF              reduce using rule 104 (statute -> read .)
    RCURLY          reduce using rule 104 (statute -> read .)
    RETURN          reduce using rule 104 (statute -> read .)


state 81

    (105) statute -> write .
    ID              reduce using rule 105 (statute -> write .)
    FROM            reduce using rule 105 (statute -> write .)
    WHILE           reduce using rule 105 (statute -> write .)
    INPUT           reduce using rule 105 (statute -> write .)
    PRINT           reduce using rule 105 (statute -> write .)
    IF              reduce using rule 105 (statute -> write .)
    RCURLY          reduce using rule 105 (statute -> write .)
    RETURN          reduce using rule 105 (statute -> write .)


state 82

    (106) statute -> condition .
    ID              reduce using rule 106 (statute -> condition .)
    FROM            reduce using rule 106 (statute -> condition .)
    WHILE           reduce using rule 106 (statute -> condition .)
    INPUT           reduce using rule 106 (statute -> condition .)
    PRINT           reduce using rule 106 (statute -> condition .)
    IF              reduce using rule 106 (statute -> condition .)
    RCURLY          reduce using rule 106 (statute -> condition .)
    RETURN          reduce using rule 106 (statute -> condition .)


state 83

    (107) statute -> assignment .
    ID              reduce using rule 107 (statute -> assignment .)
    FROM            reduce using rule 107 (statute -> assignment .)
    WHILE           reduce using rule 107 (statute -> assignment .)
    INPUT           reduce using rule 107 (statute -> assignment .)
    PRINT           reduce using rule 107 (statute -> assignment .)
    IF              reduce using rule 107 (statute -> assignment .)
    RCURLY          reduce using rule 107 (statute -> assignment .)
    RETURN          reduce using rule 107 (statute -> assignment .)


state 84

    (44) call -> ID . LPAREN callvalues RPAREN
    (86) assignment_var -> ID .
    LPAREN          shift and go to state 98
    ASSIGN          reduce using rule 86 (assignment_var -> ID .)


state 85

    (81) forloop -> FROM . var ASSIGN expression TO expression BY expression DO block
    (82) forloop -> FROM . var ASSIGN expression TO expression DO block
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44
    ID              shift and go to state 45

    var                            shift and go to state 99

state 86

    (83) whileloop -> WHILE . LPAREN expression RPAREN block
    LPAREN          shift and go to state 100


state 87

    (87) read -> INPUT . LPAREN decvar RPAREN SEMICOLON
    LPAREN          shift and go to state 101


state 88

    (88) write -> PRINT . LPAREN writevalues RPAREN SEMICOLON
    LPAREN          shift and go to state 102


state 89

    (93) condition -> IF . LPAREN expression RPAREN block ELSE block
    (94) condition -> IF . LPAREN expression RPAREN block
    LPAREN          shift and go to state 103


state 90

    (84) assignment -> assignment_var . assignment_sign expression SEMICOLON
    (85) assignment_sign -> . ASSIGN
    ASSIGN          shift and go to state 105

    assignment_sign                shift and go to state 104

state 91

    (42) params -> type ID COMMA . params
    (41) params -> . empty
    (42) params -> . type ID COMMA params
    (43) params -> . type ID
    (110) empty -> .
    (98) type -> . BOOL
    (99) type -> . FLOAT
    (100) type -> . INT
    RPAREN          reduce using rule 110 (empty -> .)
    BOOL            shift and go to state 15
    FLOAT           shift and go to state 16
    INT             shift and go to state 17

    type                           shift and go to state 64
    params                         shift and go to state 106
    empty                          shift and go to state 66

state 92

    (40) typefunc -> type ID changecontext LPAREN params RPAREN returnblock .
    FUNC            reduce using rule 40 (typefunc -> type ID changecontext LPAREN params RPAREN returnblock .)
    MAIN            reduce using rule 40 (typefunc -> type ID changecontext LPAREN params RPAREN returnblock .)


state 93

    (5) returnblock -> LCURLY . decvars blockcontent RETURN exp SEMICOLON RCURLY
    (8) decvars -> . empty
    (9) decvars -> . VARS decvar_line
    (110) empty -> .
    VARS            shift and go to state 8
    ID              reduce using rule 110 (empty -> .)
    FROM            reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    INPUT           reduce using rule 110 (empty -> .)
    PRINT           reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)

    decvars                        shift and go to state 107
    empty                          shift and go to state 7

state 94

    (39) voidfunc -> VOID ID changecontext LPAREN params RPAREN block .
    FUNC            reduce using rule 39 (voidfunc -> VOID ID changecontext LPAREN params RPAREN block .)
    MAIN            reduce using rule 39 (voidfunc -> VOID ID changecontext LPAREN params RPAREN block .)


state 95

    (32) var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET .
    COMMA           reduce using rule 32 (var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET .)
    SEMICOLON       reduce using rule 32 (var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET .)
    RPAREN          reduce using rule 32 (var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET .)
    ASSIGN          reduce using rule 32 (var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET .)
    DIVIDE          reduce using rule 32 (var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET .)
    TIMES           reduce using rule 32 (var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET .)
    MINUS           reduce using rule 32 (var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET .)
    PLUS            reduce using rule 32 (var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET .)
    NEQ             reduce using rule 32 (var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET .)
    EQ              reduce using rule 32 (var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET .)
    LTE             reduce using rule 32 (var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET .)
    GTE             reduce using rule 32 (var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET .)
    LT              reduce using rule 32 (var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET .)
    GT              reduce using rule 32 (var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET .)
    OR              reduce using rule 32 (var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET .)
    AND             reduce using rule 32 (var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET .)
    TO              reduce using rule 32 (var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET .)
    BY              reduce using rule 32 (var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET .)
    DO              reduce using rule 32 (var -> ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET .)


state 96

    (4) block -> LCURLY decvars blockcontent RCURLY .
    $end            reduce using rule 4 (block -> LCURLY decvars blockcontent RCURLY .)
    FUNC            reduce using rule 4 (block -> LCURLY decvars blockcontent RCURLY .)
    MAIN            reduce using rule 4 (block -> LCURLY decvars blockcontent RCURLY .)
    ID              reduce using rule 4 (block -> LCURLY decvars blockcontent RCURLY .)
    FROM            reduce using rule 4 (block -> LCURLY decvars blockcontent RCURLY .)
    WHILE           reduce using rule 4 (block -> LCURLY decvars blockcontent RCURLY .)
    INPUT           reduce using rule 4 (block -> LCURLY decvars blockcontent RCURLY .)
    PRINT           reduce using rule 4 (block -> LCURLY decvars blockcontent RCURLY .)
    IF              reduce using rule 4 (block -> LCURLY decvars blockcontent RCURLY .)
    RCURLY          reduce using rule 4 (block -> LCURLY decvars blockcontent RCURLY .)
    RETURN          reduce using rule 4 (block -> LCURLY decvars blockcontent RCURLY .)
    ELSE            reduce using rule 4 (block -> LCURLY decvars blockcontent RCURLY .)


state 97

    (7) blockcontent -> statute blockcontent .
    RCURLY          reduce using rule 7 (blockcontent -> statute blockcontent .)
    RETURN          reduce using rule 7 (blockcontent -> statute blockcontent .)


state 98

    (44) call -> ID LPAREN . callvalues RPAREN
    (45) callvalues -> . empty
    (46) callvalues -> . exp COMMA callvalues
    (47) callvalues -> . exp
    (110) empty -> .
    (66) exp -> . term exp_quadgen exp_aux
    (72) term -> . factor term_quadgen term_aux
    (76) factor -> . LPAREN fakefloor super_exp RPAREN
    (77) factor -> . varcte
    (78) factor -> . call
    (79) factor -> . var
    (95) varcte -> . CTEBOOL
    (96) varcte -> . CTEFLOAT
    (97) varcte -> . CTEINT
    (44) call -> . ID LPAREN callvalues RPAREN
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    RPAREN          reduce using rule 110 (empty -> .)
    LPAREN          shift and go to state 109
    CTEBOOL         shift and go to state 118
    CTEFLOAT        shift and go to state 119
    CTEINT          shift and go to state 120
    ID              shift and go to state 108
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44

    callvalues                     shift and go to state 110
    empty                          shift and go to state 111
    exp                            shift and go to state 112
    term                           shift and go to state 113
    factor                         shift and go to state 114
    varcte                         shift and go to state 115
    call                           shift and go to state 116
    var                            shift and go to state 117

state 99

    (81) forloop -> FROM var . ASSIGN expression TO expression BY expression DO block
    (82) forloop -> FROM var . ASSIGN expression TO expression DO block
    ASSIGN          shift and go to state 121


state 100

    (83) whileloop -> WHILE LPAREN . expression RPAREN block
    (56) expression -> . exp expression_quadgen expression_aux
    (66) exp -> . term exp_quadgen exp_aux
    (72) term -> . factor term_quadgen term_aux
    (76) factor -> . LPAREN fakefloor super_exp RPAREN
    (77) factor -> . varcte
    (78) factor -> . call
    (79) factor -> . var
    (95) varcte -> . CTEBOOL
    (96) varcte -> . CTEFLOAT
    (97) varcte -> . CTEINT
    (44) call -> . ID LPAREN callvalues RPAREN
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    LPAREN          shift and go to state 109
    CTEBOOL         shift and go to state 118
    CTEFLOAT        shift and go to state 119
    CTEINT          shift and go to state 120
    ID              shift and go to state 108
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44

    expression                     shift and go to state 122
    exp                            shift and go to state 123
    term                           shift and go to state 113
    factor                         shift and go to state 114
    varcte                         shift and go to state 115
    call                           shift and go to state 116
    var                            shift and go to state 117

state 101

    (87) read -> INPUT LPAREN . decvar RPAREN SEMICOLON
    (12) decvar -> . var COMMA decvar
    (13) decvar -> . var
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44
    ID              shift and go to state 45

    decvar                         shift and go to state 124
    var                            shift and go to state 26

state 102

    (88) write -> PRINT LPAREN . writevalues RPAREN SEMICOLON
    (89) writevalues -> . CTESTRING COMMA writevalues
    (90) writevalues -> . super_exp COMMA writevalues
    (91) writevalues -> . CTESTRING
    (92) writevalues -> . super_exp
    (50) super_exp -> . expression super_exp_quadgen super_exp_aux
    (56) expression -> . exp expression_quadgen expression_aux
    (66) exp -> . term exp_quadgen exp_aux
    (72) term -> . factor term_quadgen term_aux
    (76) factor -> . LPAREN fakefloor super_exp RPAREN
    (77) factor -> . varcte
    (78) factor -> . call
    (79) factor -> . var
    (95) varcte -> . CTEBOOL
    (96) varcte -> . CTEFLOAT
    (97) varcte -> . CTEINT
    (44) call -> . ID LPAREN callvalues RPAREN
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    CTESTRING       shift and go to state 126
    LPAREN          shift and go to state 109
    CTEBOOL         shift and go to state 118
    CTEFLOAT        shift and go to state 119
    CTEINT          shift and go to state 120
    ID              shift and go to state 108
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44

    writevalues                    shift and go to state 125
    super_exp                      shift and go to state 127
    expression                     shift and go to state 128
    exp                            shift and go to state 123
    term                           shift and go to state 113
    factor                         shift and go to state 114
    varcte                         shift and go to state 115
    call                           shift and go to state 116
    var                            shift and go to state 117

state 103

    (93) condition -> IF LPAREN . expression RPAREN block ELSE block
    (94) condition -> IF LPAREN . expression RPAREN block
    (56) expression -> . exp expression_quadgen expression_aux
    (66) exp -> . term exp_quadgen exp_aux
    (72) term -> . factor term_quadgen term_aux
    (76) factor -> . LPAREN fakefloor super_exp RPAREN
    (77) factor -> . varcte
    (78) factor -> . call
    (79) factor -> . var
    (95) varcte -> . CTEBOOL
    (96) varcte -> . CTEFLOAT
    (97) varcte -> . CTEINT
    (44) call -> . ID LPAREN callvalues RPAREN
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    LPAREN          shift and go to state 109
    CTEBOOL         shift and go to state 118
    CTEFLOAT        shift and go to state 119
    CTEINT          shift and go to state 120
    ID              shift and go to state 108
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44

    expression                     shift and go to state 129
    exp                            shift and go to state 123
    term                           shift and go to state 113
    factor                         shift and go to state 114
    varcte                         shift and go to state 115
    call                           shift and go to state 116
    var                            shift and go to state 117

state 104

    (84) assignment -> assignment_var assignment_sign . expression SEMICOLON
    (56) expression -> . exp expression_quadgen expression_aux
    (66) exp -> . term exp_quadgen exp_aux
    (72) term -> . factor term_quadgen term_aux
    (76) factor -> . LPAREN fakefloor super_exp RPAREN
    (77) factor -> . varcte
    (78) factor -> . call
    (79) factor -> . var
    (95) varcte -> . CTEBOOL
    (96) varcte -> . CTEFLOAT
    (97) varcte -> . CTEINT
    (44) call -> . ID LPAREN callvalues RPAREN
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    LPAREN          shift and go to state 109
    CTEBOOL         shift and go to state 118
    CTEFLOAT        shift and go to state 119
    CTEINT          shift and go to state 120
    ID              shift and go to state 108
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44

    expression                     shift and go to state 130
    exp                            shift and go to state 123
    term                           shift and go to state 113
    factor                         shift and go to state 114
    varcte                         shift and go to state 115
    call                           shift and go to state 116
    var                            shift and go to state 117

state 105

    (85) assignment_sign -> ASSIGN .
    LPAREN          reduce using rule 85 (assignment_sign -> ASSIGN .)
    CTEBOOL         reduce using rule 85 (assignment_sign -> ASSIGN .)
    CTEFLOAT        reduce using rule 85 (assignment_sign -> ASSIGN .)
    CTEINT          reduce using rule 85 (assignment_sign -> ASSIGN .)
    ID              reduce using rule 85 (assignment_sign -> ASSIGN .)
    BOOL            reduce using rule 85 (assignment_sign -> ASSIGN .)
    FLOAT           reduce using rule 85 (assignment_sign -> ASSIGN .)
    INT             reduce using rule 85 (assignment_sign -> ASSIGN .)
    ELSE            reduce using rule 85 (assignment_sign -> ASSIGN .)
    IF              reduce using rule 85 (assignment_sign -> ASSIGN .)
    PRINT           reduce using rule 85 (assignment_sign -> ASSIGN .)
    INPUT           reduce using rule 85 (assignment_sign -> ASSIGN .)
    WHILE           reduce using rule 85 (assignment_sign -> ASSIGN .)
    DO              reduce using rule 85 (assignment_sign -> ASSIGN .)
    BY              reduce using rule 85 (assignment_sign -> ASSIGN .)
    TO              reduce using rule 85 (assignment_sign -> ASSIGN .)
    FROM            reduce using rule 85 (assignment_sign -> ASSIGN .)
    VOID            reduce using rule 85 (assignment_sign -> ASSIGN .)
    RETURN          reduce using rule 85 (assignment_sign -> ASSIGN .)
    FUNC            reduce using rule 85 (assignment_sign -> ASSIGN .)
    MAIN            reduce using rule 85 (assignment_sign -> ASSIGN .)
    VARS            reduce using rule 85 (assignment_sign -> ASSIGN .)
    PROGRAM         reduce using rule 85 (assignment_sign -> ASSIGN .)


state 106

    (42) params -> type ID COMMA params .
    RPAREN          reduce using rule 42 (params -> type ID COMMA params .)


state 107

    (5) returnblock -> LCURLY decvars . blockcontent RETURN exp SEMICOLON RCURLY
    (6) blockcontent -> . empty
    (7) blockcontent -> . statute blockcontent
    (110) empty -> .
    (101) statute -> . call
    (102) statute -> . forloop
    (103) statute -> . whileloop
    (104) statute -> . read
    (105) statute -> . write
    (106) statute -> . condition
    (107) statute -> . assignment
    (44) call -> . ID LPAREN callvalues RPAREN
    (81) forloop -> . FROM var ASSIGN expression TO expression BY expression DO block
    (82) forloop -> . FROM var ASSIGN expression TO expression DO block
    (83) whileloop -> . WHILE LPAREN expression RPAREN block
    (87) read -> . INPUT LPAREN decvar RPAREN SEMICOLON
    (88) write -> . PRINT LPAREN writevalues RPAREN SEMICOLON
    (93) condition -> . IF LPAREN expression RPAREN block ELSE block
    (94) condition -> . IF LPAREN expression RPAREN block
    (84) assignment -> . assignment_var assignment_sign expression SEMICOLON
    (86) assignment_var -> . ID
    RETURN          reduce using rule 110 (empty -> .)
    ID              shift and go to state 84
    FROM            shift and go to state 85
    WHILE           shift and go to state 86
    INPUT           shift and go to state 87
    PRINT           shift and go to state 88
    IF              shift and go to state 89

    blockcontent                   shift and go to state 131
    empty                          shift and go to state 75
    statute                        shift and go to state 76
    call                           shift and go to state 77
    forloop                        shift and go to state 78
    whileloop                      shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    condition                      shift and go to state 82
    assignment                     shift and go to state 83
    assignment_var                 shift and go to state 90

state 108

    (44) call -> ID . LPAREN callvalues RPAREN
    (32) var -> ID . LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> ID . LBRACKET CTEINT RBRACKET
    (34) var -> ID .
    LPAREN          shift and go to state 98
    LBRACKET        shift and go to state 51
    DIVIDE          reduce using rule 34 (var -> ID .)
    TIMES           reduce using rule 34 (var -> ID .)
    MINUS           reduce using rule 34 (var -> ID .)
    PLUS            reduce using rule 34 (var -> ID .)
    COMMA           reduce using rule 34 (var -> ID .)
    RPAREN          reduce using rule 34 (var -> ID .)
    NEQ             reduce using rule 34 (var -> ID .)
    EQ              reduce using rule 34 (var -> ID .)
    LTE             reduce using rule 34 (var -> ID .)
    GTE             reduce using rule 34 (var -> ID .)
    LT              reduce using rule 34 (var -> ID .)
    GT              reduce using rule 34 (var -> ID .)
    OR              reduce using rule 34 (var -> ID .)
    AND             reduce using rule 34 (var -> ID .)
    SEMICOLON       reduce using rule 34 (var -> ID .)
    TO              reduce using rule 34 (var -> ID .)
    BY              reduce using rule 34 (var -> ID .)
    DO              reduce using rule 34 (var -> ID .)


state 109

    (76) factor -> LPAREN . fakefloor super_exp RPAREN
    (80) fakefloor -> .
    LPAREN          reduce using rule 80 (fakefloor -> .)
    CTEBOOL         reduce using rule 80 (fakefloor -> .)
    CTEFLOAT        reduce using rule 80 (fakefloor -> .)
    CTEINT          reduce using rule 80 (fakefloor -> .)
    ID              reduce using rule 80 (fakefloor -> .)
    BOOL            reduce using rule 80 (fakefloor -> .)
    FLOAT           reduce using rule 80 (fakefloor -> .)
    INT             reduce using rule 80 (fakefloor -> .)
    ELSE            reduce using rule 80 (fakefloor -> .)
    IF              reduce using rule 80 (fakefloor -> .)
    PRINT           reduce using rule 80 (fakefloor -> .)
    INPUT           reduce using rule 80 (fakefloor -> .)
    WHILE           reduce using rule 80 (fakefloor -> .)
    DO              reduce using rule 80 (fakefloor -> .)
    BY              reduce using rule 80 (fakefloor -> .)
    TO              reduce using rule 80 (fakefloor -> .)
    FROM            reduce using rule 80 (fakefloor -> .)
    VOID            reduce using rule 80 (fakefloor -> .)
    RETURN          reduce using rule 80 (fakefloor -> .)
    FUNC            reduce using rule 80 (fakefloor -> .)
    MAIN            reduce using rule 80 (fakefloor -> .)
    VARS            reduce using rule 80 (fakefloor -> .)
    PROGRAM         reduce using rule 80 (fakefloor -> .)

    fakefloor                      shift and go to state 132

state 110

    (44) call -> ID LPAREN callvalues . RPAREN
    RPAREN          shift and go to state 133


state 111

    (45) callvalues -> empty .
    RPAREN          reduce using rule 45 (callvalues -> empty .)


state 112

    (46) callvalues -> exp . COMMA callvalues
    (47) callvalues -> exp .
    COMMA           shift and go to state 134
    RPAREN          reduce using rule 47 (callvalues -> exp .)


state 113

    (66) exp -> term . exp_quadgen exp_aux
    (69) exp_quadgen -> .
    MINUS           reduce using rule 69 (exp_quadgen -> .)
    PLUS            reduce using rule 69 (exp_quadgen -> .)
    COMMA           reduce using rule 69 (exp_quadgen -> .)
    RPAREN          reduce using rule 69 (exp_quadgen -> .)
    NEQ             reduce using rule 69 (exp_quadgen -> .)
    EQ              reduce using rule 69 (exp_quadgen -> .)
    LTE             reduce using rule 69 (exp_quadgen -> .)
    GTE             reduce using rule 69 (exp_quadgen -> .)
    LT              reduce using rule 69 (exp_quadgen -> .)
    GT              reduce using rule 69 (exp_quadgen -> .)
    OR              reduce using rule 69 (exp_quadgen -> .)
    AND             reduce using rule 69 (exp_quadgen -> .)
    SEMICOLON       reduce using rule 69 (exp_quadgen -> .)
    TO              reduce using rule 69 (exp_quadgen -> .)
    BY              reduce using rule 69 (exp_quadgen -> .)
    DO              reduce using rule 69 (exp_quadgen -> .)

    exp_quadgen                    shift and go to state 135

state 114

    (72) term -> factor . term_quadgen term_aux
    (75) term_quadgen -> .
    DIVIDE          reduce using rule 75 (term_quadgen -> .)
    TIMES           reduce using rule 75 (term_quadgen -> .)
    MINUS           reduce using rule 75 (term_quadgen -> .)
    PLUS            reduce using rule 75 (term_quadgen -> .)
    COMMA           reduce using rule 75 (term_quadgen -> .)
    RPAREN          reduce using rule 75 (term_quadgen -> .)
    NEQ             reduce using rule 75 (term_quadgen -> .)
    EQ              reduce using rule 75 (term_quadgen -> .)
    LTE             reduce using rule 75 (term_quadgen -> .)
    GTE             reduce using rule 75 (term_quadgen -> .)
    LT              reduce using rule 75 (term_quadgen -> .)
    GT              reduce using rule 75 (term_quadgen -> .)
    OR              reduce using rule 75 (term_quadgen -> .)
    AND             reduce using rule 75 (term_quadgen -> .)
    SEMICOLON       reduce using rule 75 (term_quadgen -> .)
    TO              reduce using rule 75 (term_quadgen -> .)
    BY              reduce using rule 75 (term_quadgen -> .)
    DO              reduce using rule 75 (term_quadgen -> .)

    term_quadgen                   shift and go to state 136

state 115

    (77) factor -> varcte .
    DIVIDE          reduce using rule 77 (factor -> varcte .)
    TIMES           reduce using rule 77 (factor -> varcte .)
    MINUS           reduce using rule 77 (factor -> varcte .)
    PLUS            reduce using rule 77 (factor -> varcte .)
    COMMA           reduce using rule 77 (factor -> varcte .)
    RPAREN          reduce using rule 77 (factor -> varcte .)
    NEQ             reduce using rule 77 (factor -> varcte .)
    EQ              reduce using rule 77 (factor -> varcte .)
    LTE             reduce using rule 77 (factor -> varcte .)
    GTE             reduce using rule 77 (factor -> varcte .)
    LT              reduce using rule 77 (factor -> varcte .)
    GT              reduce using rule 77 (factor -> varcte .)
    OR              reduce using rule 77 (factor -> varcte .)
    AND             reduce using rule 77 (factor -> varcte .)
    SEMICOLON       reduce using rule 77 (factor -> varcte .)
    TO              reduce using rule 77 (factor -> varcte .)
    BY              reduce using rule 77 (factor -> varcte .)
    DO              reduce using rule 77 (factor -> varcte .)


state 116

    (78) factor -> call .
    DIVIDE          reduce using rule 78 (factor -> call .)
    TIMES           reduce using rule 78 (factor -> call .)
    MINUS           reduce using rule 78 (factor -> call .)
    PLUS            reduce using rule 78 (factor -> call .)
    COMMA           reduce using rule 78 (factor -> call .)
    RPAREN          reduce using rule 78 (factor -> call .)
    NEQ             reduce using rule 78 (factor -> call .)
    EQ              reduce using rule 78 (factor -> call .)
    LTE             reduce using rule 78 (factor -> call .)
    GTE             reduce using rule 78 (factor -> call .)
    LT              reduce using rule 78 (factor -> call .)
    GT              reduce using rule 78 (factor -> call .)
    OR              reduce using rule 78 (factor -> call .)
    AND             reduce using rule 78 (factor -> call .)
    SEMICOLON       reduce using rule 78 (factor -> call .)
    TO              reduce using rule 78 (factor -> call .)
    BY              reduce using rule 78 (factor -> call .)
    DO              reduce using rule 78 (factor -> call .)


state 117

    (79) factor -> var .
    DIVIDE          reduce using rule 79 (factor -> var .)
    TIMES           reduce using rule 79 (factor -> var .)
    MINUS           reduce using rule 79 (factor -> var .)
    PLUS            reduce using rule 79 (factor -> var .)
    COMMA           reduce using rule 79 (factor -> var .)
    RPAREN          reduce using rule 79 (factor -> var .)
    NEQ             reduce using rule 79 (factor -> var .)
    EQ              reduce using rule 79 (factor -> var .)
    LTE             reduce using rule 79 (factor -> var .)
    GTE             reduce using rule 79 (factor -> var .)
    LT              reduce using rule 79 (factor -> var .)
    GT              reduce using rule 79 (factor -> var .)
    OR              reduce using rule 79 (factor -> var .)
    AND             reduce using rule 79 (factor -> var .)
    SEMICOLON       reduce using rule 79 (factor -> var .)
    TO              reduce using rule 79 (factor -> var .)
    BY              reduce using rule 79 (factor -> var .)
    DO              reduce using rule 79 (factor -> var .)


state 118

    (95) varcte -> CTEBOOL .
    DIVIDE          reduce using rule 95 (varcte -> CTEBOOL .)
    TIMES           reduce using rule 95 (varcte -> CTEBOOL .)
    MINUS           reduce using rule 95 (varcte -> CTEBOOL .)
    PLUS            reduce using rule 95 (varcte -> CTEBOOL .)
    COMMA           reduce using rule 95 (varcte -> CTEBOOL .)
    RPAREN          reduce using rule 95 (varcte -> CTEBOOL .)
    NEQ             reduce using rule 95 (varcte -> CTEBOOL .)
    EQ              reduce using rule 95 (varcte -> CTEBOOL .)
    LTE             reduce using rule 95 (varcte -> CTEBOOL .)
    GTE             reduce using rule 95 (varcte -> CTEBOOL .)
    LT              reduce using rule 95 (varcte -> CTEBOOL .)
    GT              reduce using rule 95 (varcte -> CTEBOOL .)
    OR              reduce using rule 95 (varcte -> CTEBOOL .)
    AND             reduce using rule 95 (varcte -> CTEBOOL .)
    SEMICOLON       reduce using rule 95 (varcte -> CTEBOOL .)
    TO              reduce using rule 95 (varcte -> CTEBOOL .)
    BY              reduce using rule 95 (varcte -> CTEBOOL .)
    DO              reduce using rule 95 (varcte -> CTEBOOL .)


state 119

    (96) varcte -> CTEFLOAT .
    DIVIDE          reduce using rule 96 (varcte -> CTEFLOAT .)
    TIMES           reduce using rule 96 (varcte -> CTEFLOAT .)
    MINUS           reduce using rule 96 (varcte -> CTEFLOAT .)
    PLUS            reduce using rule 96 (varcte -> CTEFLOAT .)
    COMMA           reduce using rule 96 (varcte -> CTEFLOAT .)
    RPAREN          reduce using rule 96 (varcte -> CTEFLOAT .)
    NEQ             reduce using rule 96 (varcte -> CTEFLOAT .)
    EQ              reduce using rule 96 (varcte -> CTEFLOAT .)
    LTE             reduce using rule 96 (varcte -> CTEFLOAT .)
    GTE             reduce using rule 96 (varcte -> CTEFLOAT .)
    LT              reduce using rule 96 (varcte -> CTEFLOAT .)
    GT              reduce using rule 96 (varcte -> CTEFLOAT .)
    OR              reduce using rule 96 (varcte -> CTEFLOAT .)
    AND             reduce using rule 96 (varcte -> CTEFLOAT .)
    SEMICOLON       reduce using rule 96 (varcte -> CTEFLOAT .)
    TO              reduce using rule 96 (varcte -> CTEFLOAT .)
    BY              reduce using rule 96 (varcte -> CTEFLOAT .)
    DO              reduce using rule 96 (varcte -> CTEFLOAT .)


state 120

    (97) varcte -> CTEINT .
    DIVIDE          reduce using rule 97 (varcte -> CTEINT .)
    TIMES           reduce using rule 97 (varcte -> CTEINT .)
    MINUS           reduce using rule 97 (varcte -> CTEINT .)
    PLUS            reduce using rule 97 (varcte -> CTEINT .)
    COMMA           reduce using rule 97 (varcte -> CTEINT .)
    RPAREN          reduce using rule 97 (varcte -> CTEINT .)
    NEQ             reduce using rule 97 (varcte -> CTEINT .)
    EQ              reduce using rule 97 (varcte -> CTEINT .)
    LTE             reduce using rule 97 (varcte -> CTEINT .)
    GTE             reduce using rule 97 (varcte -> CTEINT .)
    LT              reduce using rule 97 (varcte -> CTEINT .)
    GT              reduce using rule 97 (varcte -> CTEINT .)
    OR              reduce using rule 97 (varcte -> CTEINT .)
    AND             reduce using rule 97 (varcte -> CTEINT .)
    SEMICOLON       reduce using rule 97 (varcte -> CTEINT .)
    TO              reduce using rule 97 (varcte -> CTEINT .)
    BY              reduce using rule 97 (varcte -> CTEINT .)
    DO              reduce using rule 97 (varcte -> CTEINT .)


state 121

    (81) forloop -> FROM var ASSIGN . expression TO expression BY expression DO block
    (82) forloop -> FROM var ASSIGN . expression TO expression DO block
    (56) expression -> . exp expression_quadgen expression_aux
    (66) exp -> . term exp_quadgen exp_aux
    (72) term -> . factor term_quadgen term_aux
    (76) factor -> . LPAREN fakefloor super_exp RPAREN
    (77) factor -> . varcte
    (78) factor -> . call
    (79) factor -> . var
    (95) varcte -> . CTEBOOL
    (96) varcte -> . CTEFLOAT
    (97) varcte -> . CTEINT
    (44) call -> . ID LPAREN callvalues RPAREN
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    LPAREN          shift and go to state 109
    CTEBOOL         shift and go to state 118
    CTEFLOAT        shift and go to state 119
    CTEINT          shift and go to state 120
    ID              shift and go to state 108
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44

    var                            shift and go to state 117
    expression                     shift and go to state 137
    exp                            shift and go to state 123
    term                           shift and go to state 113
    factor                         shift and go to state 114
    varcte                         shift and go to state 115
    call                           shift and go to state 116

state 122

    (83) whileloop -> WHILE LPAREN expression . RPAREN block
    RPAREN          shift and go to state 138


state 123

    (56) expression -> exp . expression_quadgen expression_aux
    (63) expression_quadgen -> .
    NEQ             reduce using rule 63 (expression_quadgen -> .)
    EQ              reduce using rule 63 (expression_quadgen -> .)
    LTE             reduce using rule 63 (expression_quadgen -> .)
    GTE             reduce using rule 63 (expression_quadgen -> .)
    LT              reduce using rule 63 (expression_quadgen -> .)
    GT              reduce using rule 63 (expression_quadgen -> .)
    RPAREN          reduce using rule 63 (expression_quadgen -> .)
    OR              reduce using rule 63 (expression_quadgen -> .)
    AND             reduce using rule 63 (expression_quadgen -> .)
    COMMA           reduce using rule 63 (expression_quadgen -> .)
    SEMICOLON       reduce using rule 63 (expression_quadgen -> .)
    TO              reduce using rule 63 (expression_quadgen -> .)
    BY              reduce using rule 63 (expression_quadgen -> .)
    DO              reduce using rule 63 (expression_quadgen -> .)

    expression_quadgen             shift and go to state 139

state 124

    (87) read -> INPUT LPAREN decvar . RPAREN SEMICOLON
    RPAREN          shift and go to state 140


state 125

    (88) write -> PRINT LPAREN writevalues . RPAREN SEMICOLON
    RPAREN          shift and go to state 141


state 126

    (89) writevalues -> CTESTRING . COMMA writevalues
    (91) writevalues -> CTESTRING .
    COMMA           shift and go to state 142
    RPAREN          reduce using rule 91 (writevalues -> CTESTRING .)


state 127

    (90) writevalues -> super_exp . COMMA writevalues
    (92) writevalues -> super_exp .
    COMMA           shift and go to state 143
    RPAREN          reduce using rule 92 (writevalues -> super_exp .)


state 128

    (50) super_exp -> expression . super_exp_quadgen super_exp_aux
    (53) super_exp_quadgen -> .
    OR              reduce using rule 53 (super_exp_quadgen -> .)
    AND             reduce using rule 53 (super_exp_quadgen -> .)
    COMMA           reduce using rule 53 (super_exp_quadgen -> .)
    RPAREN          reduce using rule 53 (super_exp_quadgen -> .)

    super_exp_quadgen              shift and go to state 144

state 129

    (93) condition -> IF LPAREN expression . RPAREN block ELSE block
    (94) condition -> IF LPAREN expression . RPAREN block
    RPAREN          shift and go to state 145


state 130

    (84) assignment -> assignment_var assignment_sign expression . SEMICOLON
    SEMICOLON       shift and go to state 146


state 131

    (5) returnblock -> LCURLY decvars blockcontent . RETURN exp SEMICOLON RCURLY
    RETURN          shift and go to state 147


state 132

    (76) factor -> LPAREN fakefloor . super_exp RPAREN
    (50) super_exp -> . expression super_exp_quadgen super_exp_aux
    (56) expression -> . exp expression_quadgen expression_aux
    (66) exp -> . term exp_quadgen exp_aux
    (72) term -> . factor term_quadgen term_aux
    (76) factor -> . LPAREN fakefloor super_exp RPAREN
    (77) factor -> . varcte
    (78) factor -> . call
    (79) factor -> . var
    (95) varcte -> . CTEBOOL
    (96) varcte -> . CTEFLOAT
    (97) varcte -> . CTEINT
    (44) call -> . ID LPAREN callvalues RPAREN
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    LPAREN          shift and go to state 109
    CTEBOOL         shift and go to state 118
    CTEFLOAT        shift and go to state 119
    CTEINT          shift and go to state 120
    ID              shift and go to state 108
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44

    super_exp                      shift and go to state 148
    expression                     shift and go to state 128
    exp                            shift and go to state 123
    term                           shift and go to state 113
    factor                         shift and go to state 114
    varcte                         shift and go to state 115
    call                           shift and go to state 116
    var                            shift and go to state 117

state 133

    (44) call -> ID LPAREN callvalues RPAREN .
    ID              reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    FROM            reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    WHILE           reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    INPUT           reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    PRINT           reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    IF              reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    RCURLY          reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    RETURN          reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    DIVIDE          reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    TIMES           reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    MINUS           reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    PLUS            reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    COMMA           reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    RPAREN          reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    NEQ             reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    EQ              reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    LTE             reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    GTE             reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    LT              reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    GT              reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    OR              reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    AND             reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    SEMICOLON       reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    TO              reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    BY              reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)
    DO              reduce using rule 44 (call -> ID LPAREN callvalues RPAREN .)


state 134

    (46) callvalues -> exp COMMA . callvalues
    (45) callvalues -> . empty
    (46) callvalues -> . exp COMMA callvalues
    (47) callvalues -> . exp
    (110) empty -> .
    (66) exp -> . term exp_quadgen exp_aux
    (72) term -> . factor term_quadgen term_aux
    (76) factor -> . LPAREN fakefloor super_exp RPAREN
    (77) factor -> . varcte
    (78) factor -> . call
    (79) factor -> . var
    (95) varcte -> . CTEBOOL
    (96) varcte -> . CTEFLOAT
    (97) varcte -> . CTEINT
    (44) call -> . ID LPAREN callvalues RPAREN
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    RPAREN          reduce using rule 110 (empty -> .)
    LPAREN          shift and go to state 109
    CTEBOOL         shift and go to state 118
    CTEFLOAT        shift and go to state 119
    CTEINT          shift and go to state 120
    ID              shift and go to state 108
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44

    exp                            shift and go to state 112
    callvalues                     shift and go to state 149
    empty                          shift and go to state 111
    term                           shift and go to state 113
    factor                         shift and go to state 114
    varcte                         shift and go to state 115
    call                           shift and go to state 116
    var                            shift and go to state 117

state 135

    (66) exp -> term exp_quadgen . exp_aux
    (64) exp_aux -> . exp_sign exp
    (65) exp_aux -> . empty
    (67) exp_sign -> . MINUS
    (68) exp_sign -> . PLUS
    (110) empty -> .
    MINUS           shift and go to state 153
    PLUS            shift and go to state 154
    COMMA           reduce using rule 110 (empty -> .)
    RPAREN          reduce using rule 110 (empty -> .)
    NEQ             reduce using rule 110 (empty -> .)
    EQ              reduce using rule 110 (empty -> .)
    LTE             reduce using rule 110 (empty -> .)
    GTE             reduce using rule 110 (empty -> .)
    LT              reduce using rule 110 (empty -> .)
    GT              reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    SEMICOLON       reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)
    BY              reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)

    exp_aux                        shift and go to state 150
    exp_sign                       shift and go to state 151
    empty                          shift and go to state 152

state 136

    (72) term -> factor term_quadgen . term_aux
    (70) term_aux -> . term_sign term
    (71) term_aux -> . empty
    (73) term_sign -> . DIVIDE
    (74) term_sign -> . TIMES
    (110) empty -> .
    DIVIDE          shift and go to state 158
    TIMES           shift and go to state 159
    MINUS           reduce using rule 110 (empty -> .)
    PLUS            reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    RPAREN          reduce using rule 110 (empty -> .)
    NEQ             reduce using rule 110 (empty -> .)
    EQ              reduce using rule 110 (empty -> .)
    LTE             reduce using rule 110 (empty -> .)
    GTE             reduce using rule 110 (empty -> .)
    LT              reduce using rule 110 (empty -> .)
    GT              reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    SEMICOLON       reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)
    BY              reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)

    term_aux                       shift and go to state 155
    term_sign                      shift and go to state 156
    empty                          shift and go to state 157

state 137

    (81) forloop -> FROM var ASSIGN expression . TO expression BY expression DO block
    (82) forloop -> FROM var ASSIGN expression . TO expression DO block
    TO              shift and go to state 160


state 138

    (83) whileloop -> WHILE LPAREN expression RPAREN . block
    (4) block -> . LCURLY decvars blockcontent RCURLY
    LCURLY          shift and go to state 63

    block                          shift and go to state 161

state 139

    (56) expression -> exp expression_quadgen . expression_aux
    (54) expression_aux -> . relation expression
    (55) expression_aux -> . empty
    (57) relation -> . NEQ
    (58) relation -> . EQ
    (59) relation -> . LTE
    (60) relation -> . GTE
    (61) relation -> . LT
    (62) relation -> . GT
    (110) empty -> .
    NEQ             shift and go to state 165
    EQ              shift and go to state 166
    LTE             shift and go to state 167
    GTE             shift and go to state 168
    LT              shift and go to state 169
    GT              shift and go to state 170
    RPAREN          reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    SEMICOLON       reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)
    BY              reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)

    expression_aux                 shift and go to state 162
    relation                       shift and go to state 163
    empty                          shift and go to state 164

state 140

    (87) read -> INPUT LPAREN decvar RPAREN . SEMICOLON
    SEMICOLON       shift and go to state 171


state 141

    (88) write -> PRINT LPAREN writevalues RPAREN . SEMICOLON
    SEMICOLON       shift and go to state 172


state 142

    (89) writevalues -> CTESTRING COMMA . writevalues
    (89) writevalues -> . CTESTRING COMMA writevalues
    (90) writevalues -> . super_exp COMMA writevalues
    (91) writevalues -> . CTESTRING
    (92) writevalues -> . super_exp
    (50) super_exp -> . expression super_exp_quadgen super_exp_aux
    (56) expression -> . exp expression_quadgen expression_aux
    (66) exp -> . term exp_quadgen exp_aux
    (72) term -> . factor term_quadgen term_aux
    (76) factor -> . LPAREN fakefloor super_exp RPAREN
    (77) factor -> . varcte
    (78) factor -> . call
    (79) factor -> . var
    (95) varcte -> . CTEBOOL
    (96) varcte -> . CTEFLOAT
    (97) varcte -> . CTEINT
    (44) call -> . ID LPAREN callvalues RPAREN
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    CTESTRING       shift and go to state 126
    LPAREN          shift and go to state 109
    CTEBOOL         shift and go to state 118
    CTEFLOAT        shift and go to state 119
    CTEINT          shift and go to state 120
    ID              shift and go to state 108
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44

    writevalues                    shift and go to state 173
    super_exp                      shift and go to state 127
    expression                     shift and go to state 128
    exp                            shift and go to state 123
    term                           shift and go to state 113
    factor                         shift and go to state 114
    varcte                         shift and go to state 115
    call                           shift and go to state 116
    var                            shift and go to state 117

state 143

    (90) writevalues -> super_exp COMMA . writevalues
    (89) writevalues -> . CTESTRING COMMA writevalues
    (90) writevalues -> . super_exp COMMA writevalues
    (91) writevalues -> . CTESTRING
    (92) writevalues -> . super_exp
    (50) super_exp -> . expression super_exp_quadgen super_exp_aux
    (56) expression -> . exp expression_quadgen expression_aux
    (66) exp -> . term exp_quadgen exp_aux
    (72) term -> . factor term_quadgen term_aux
    (76) factor -> . LPAREN fakefloor super_exp RPAREN
    (77) factor -> . varcte
    (78) factor -> . call
    (79) factor -> . var
    (95) varcte -> . CTEBOOL
    (96) varcte -> . CTEFLOAT
    (97) varcte -> . CTEINT
    (44) call -> . ID LPAREN callvalues RPAREN
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    CTESTRING       shift and go to state 126
    LPAREN          shift and go to state 109
    CTEBOOL         shift and go to state 118
    CTEFLOAT        shift and go to state 119
    CTEINT          shift and go to state 120
    ID              shift and go to state 108
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44

    super_exp                      shift and go to state 127
    writevalues                    shift and go to state 174
    expression                     shift and go to state 128
    exp                            shift and go to state 123
    term                           shift and go to state 113
    factor                         shift and go to state 114
    varcte                         shift and go to state 115
    call                           shift and go to state 116
    var                            shift and go to state 117

state 144

    (50) super_exp -> expression super_exp_quadgen . super_exp_aux
    (48) super_exp_aux -> . logic super_exp
    (49) super_exp_aux -> . empty
    (51) logic -> . OR
    (52) logic -> . AND
    (110) empty -> .
    OR              shift and go to state 178
    AND             shift and go to state 179
    COMMA           reduce using rule 110 (empty -> .)
    RPAREN          reduce using rule 110 (empty -> .)

    super_exp_aux                  shift and go to state 175
    logic                          shift and go to state 176
    empty                          shift and go to state 177

state 145

    (93) condition -> IF LPAREN expression RPAREN . block ELSE block
    (94) condition -> IF LPAREN expression RPAREN . block
    (4) block -> . LCURLY decvars blockcontent RCURLY
    LCURLY          shift and go to state 63

    block                          shift and go to state 180

state 146

    (84) assignment -> assignment_var assignment_sign expression SEMICOLON .
    ID              reduce using rule 84 (assignment -> assignment_var assignment_sign expression SEMICOLON .)
    FROM            reduce using rule 84 (assignment -> assignment_var assignment_sign expression SEMICOLON .)
    WHILE           reduce using rule 84 (assignment -> assignment_var assignment_sign expression SEMICOLON .)
    INPUT           reduce using rule 84 (assignment -> assignment_var assignment_sign expression SEMICOLON .)
    PRINT           reduce using rule 84 (assignment -> assignment_var assignment_sign expression SEMICOLON .)
    IF              reduce using rule 84 (assignment -> assignment_var assignment_sign expression SEMICOLON .)
    RCURLY          reduce using rule 84 (assignment -> assignment_var assignment_sign expression SEMICOLON .)
    RETURN          reduce using rule 84 (assignment -> assignment_var assignment_sign expression SEMICOLON .)


state 147

    (5) returnblock -> LCURLY decvars blockcontent RETURN . exp SEMICOLON RCURLY
    (66) exp -> . term exp_quadgen exp_aux
    (72) term -> . factor term_quadgen term_aux
    (76) factor -> . LPAREN fakefloor super_exp RPAREN
    (77) factor -> . varcte
    (78) factor -> . call
    (79) factor -> . var
    (95) varcte -> . CTEBOOL
    (96) varcte -> . CTEFLOAT
    (97) varcte -> . CTEINT
    (44) call -> . ID LPAREN callvalues RPAREN
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    LPAREN          shift and go to state 109
    CTEBOOL         shift and go to state 118
    CTEFLOAT        shift and go to state 119
    CTEINT          shift and go to state 120
    ID              shift and go to state 108
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44

    exp                            shift and go to state 181
    term                           shift and go to state 113
    factor                         shift and go to state 114
    varcte                         shift and go to state 115
    call                           shift and go to state 116
    var                            shift and go to state 117

state 148

    (76) factor -> LPAREN fakefloor super_exp . RPAREN
    RPAREN          shift and go to state 182


state 149

    (46) callvalues -> exp COMMA callvalues .
    RPAREN          reduce using rule 46 (callvalues -> exp COMMA callvalues .)


state 150

    (66) exp -> term exp_quadgen exp_aux .
    COMMA           reduce using rule 66 (exp -> term exp_quadgen exp_aux .)
    RPAREN          reduce using rule 66 (exp -> term exp_quadgen exp_aux .)
    NEQ             reduce using rule 66 (exp -> term exp_quadgen exp_aux .)
    EQ              reduce using rule 66 (exp -> term exp_quadgen exp_aux .)
    LTE             reduce using rule 66 (exp -> term exp_quadgen exp_aux .)
    GTE             reduce using rule 66 (exp -> term exp_quadgen exp_aux .)
    LT              reduce using rule 66 (exp -> term exp_quadgen exp_aux .)
    GT              reduce using rule 66 (exp -> term exp_quadgen exp_aux .)
    OR              reduce using rule 66 (exp -> term exp_quadgen exp_aux .)
    AND             reduce using rule 66 (exp -> term exp_quadgen exp_aux .)
    SEMICOLON       reduce using rule 66 (exp -> term exp_quadgen exp_aux .)
    TO              reduce using rule 66 (exp -> term exp_quadgen exp_aux .)
    BY              reduce using rule 66 (exp -> term exp_quadgen exp_aux .)
    DO              reduce using rule 66 (exp -> term exp_quadgen exp_aux .)


state 151

    (64) exp_aux -> exp_sign . exp
    (66) exp -> . term exp_quadgen exp_aux
    (72) term -> . factor term_quadgen term_aux
    (76) factor -> . LPAREN fakefloor super_exp RPAREN
    (77) factor -> . varcte
    (78) factor -> . call
    (79) factor -> . var
    (95) varcte -> . CTEBOOL
    (96) varcte -> . CTEFLOAT
    (97) varcte -> . CTEINT
    (44) call -> . ID LPAREN callvalues RPAREN
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    LPAREN          shift and go to state 109
    CTEBOOL         shift and go to state 118
    CTEFLOAT        shift and go to state 119
    CTEINT          shift and go to state 120
    ID              shift and go to state 108
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44

    exp                            shift and go to state 183
    term                           shift and go to state 113
    factor                         shift and go to state 114
    varcte                         shift and go to state 115
    call                           shift and go to state 116
    var                            shift and go to state 117

state 152

    (65) exp_aux -> empty .
    COMMA           reduce using rule 65 (exp_aux -> empty .)
    RPAREN          reduce using rule 65 (exp_aux -> empty .)
    NEQ             reduce using rule 65 (exp_aux -> empty .)
    EQ              reduce using rule 65 (exp_aux -> empty .)
    LTE             reduce using rule 65 (exp_aux -> empty .)
    GTE             reduce using rule 65 (exp_aux -> empty .)
    LT              reduce using rule 65 (exp_aux -> empty .)
    GT              reduce using rule 65 (exp_aux -> empty .)
    OR              reduce using rule 65 (exp_aux -> empty .)
    AND             reduce using rule 65 (exp_aux -> empty .)
    SEMICOLON       reduce using rule 65 (exp_aux -> empty .)
    TO              reduce using rule 65 (exp_aux -> empty .)
    BY              reduce using rule 65 (exp_aux -> empty .)
    DO              reduce using rule 65 (exp_aux -> empty .)


state 153

    (67) exp_sign -> MINUS .
    LPAREN          reduce using rule 67 (exp_sign -> MINUS .)
    CTEBOOL         reduce using rule 67 (exp_sign -> MINUS .)
    CTEFLOAT        reduce using rule 67 (exp_sign -> MINUS .)
    CTEINT          reduce using rule 67 (exp_sign -> MINUS .)
    ID              reduce using rule 67 (exp_sign -> MINUS .)
    BOOL            reduce using rule 67 (exp_sign -> MINUS .)
    FLOAT           reduce using rule 67 (exp_sign -> MINUS .)
    INT             reduce using rule 67 (exp_sign -> MINUS .)
    ELSE            reduce using rule 67 (exp_sign -> MINUS .)
    IF              reduce using rule 67 (exp_sign -> MINUS .)
    PRINT           reduce using rule 67 (exp_sign -> MINUS .)
    INPUT           reduce using rule 67 (exp_sign -> MINUS .)
    WHILE           reduce using rule 67 (exp_sign -> MINUS .)
    DO              reduce using rule 67 (exp_sign -> MINUS .)
    BY              reduce using rule 67 (exp_sign -> MINUS .)
    TO              reduce using rule 67 (exp_sign -> MINUS .)
    FROM            reduce using rule 67 (exp_sign -> MINUS .)
    VOID            reduce using rule 67 (exp_sign -> MINUS .)
    RETURN          reduce using rule 67 (exp_sign -> MINUS .)
    FUNC            reduce using rule 67 (exp_sign -> MINUS .)
    MAIN            reduce using rule 67 (exp_sign -> MINUS .)
    VARS            reduce using rule 67 (exp_sign -> MINUS .)
    PROGRAM         reduce using rule 67 (exp_sign -> MINUS .)


state 154

    (68) exp_sign -> PLUS .
    LPAREN          reduce using rule 68 (exp_sign -> PLUS .)
    CTEBOOL         reduce using rule 68 (exp_sign -> PLUS .)
    CTEFLOAT        reduce using rule 68 (exp_sign -> PLUS .)
    CTEINT          reduce using rule 68 (exp_sign -> PLUS .)
    ID              reduce using rule 68 (exp_sign -> PLUS .)
    BOOL            reduce using rule 68 (exp_sign -> PLUS .)
    FLOAT           reduce using rule 68 (exp_sign -> PLUS .)
    INT             reduce using rule 68 (exp_sign -> PLUS .)
    ELSE            reduce using rule 68 (exp_sign -> PLUS .)
    IF              reduce using rule 68 (exp_sign -> PLUS .)
    PRINT           reduce using rule 68 (exp_sign -> PLUS .)
    INPUT           reduce using rule 68 (exp_sign -> PLUS .)
    WHILE           reduce using rule 68 (exp_sign -> PLUS .)
    DO              reduce using rule 68 (exp_sign -> PLUS .)
    BY              reduce using rule 68 (exp_sign -> PLUS .)
    TO              reduce using rule 68 (exp_sign -> PLUS .)
    FROM            reduce using rule 68 (exp_sign -> PLUS .)
    VOID            reduce using rule 68 (exp_sign -> PLUS .)
    RETURN          reduce using rule 68 (exp_sign -> PLUS .)
    FUNC            reduce using rule 68 (exp_sign -> PLUS .)
    MAIN            reduce using rule 68 (exp_sign -> PLUS .)
    VARS            reduce using rule 68 (exp_sign -> PLUS .)
    PROGRAM         reduce using rule 68 (exp_sign -> PLUS .)


state 155

    (72) term -> factor term_quadgen term_aux .
    MINUS           reduce using rule 72 (term -> factor term_quadgen term_aux .)
    PLUS            reduce using rule 72 (term -> factor term_quadgen term_aux .)
    COMMA           reduce using rule 72 (term -> factor term_quadgen term_aux .)
    RPAREN          reduce using rule 72 (term -> factor term_quadgen term_aux .)
    NEQ             reduce using rule 72 (term -> factor term_quadgen term_aux .)
    EQ              reduce using rule 72 (term -> factor term_quadgen term_aux .)
    LTE             reduce using rule 72 (term -> factor term_quadgen term_aux .)
    GTE             reduce using rule 72 (term -> factor term_quadgen term_aux .)
    LT              reduce using rule 72 (term -> factor term_quadgen term_aux .)
    GT              reduce using rule 72 (term -> factor term_quadgen term_aux .)
    OR              reduce using rule 72 (term -> factor term_quadgen term_aux .)
    AND             reduce using rule 72 (term -> factor term_quadgen term_aux .)
    SEMICOLON       reduce using rule 72 (term -> factor term_quadgen term_aux .)
    TO              reduce using rule 72 (term -> factor term_quadgen term_aux .)
    BY              reduce using rule 72 (term -> factor term_quadgen term_aux .)
    DO              reduce using rule 72 (term -> factor term_quadgen term_aux .)


state 156

    (70) term_aux -> term_sign . term
    (72) term -> . factor term_quadgen term_aux
    (76) factor -> . LPAREN fakefloor super_exp RPAREN
    (77) factor -> . varcte
    (78) factor -> . call
    (79) factor -> . var
    (95) varcte -> . CTEBOOL
    (96) varcte -> . CTEFLOAT
    (97) varcte -> . CTEINT
    (44) call -> . ID LPAREN callvalues RPAREN
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    LPAREN          shift and go to state 109
    CTEBOOL         shift and go to state 118
    CTEFLOAT        shift and go to state 119
    CTEINT          shift and go to state 120
    ID              shift and go to state 108
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44

    term                           shift and go to state 184
    factor                         shift and go to state 114
    varcte                         shift and go to state 115
    call                           shift and go to state 116
    var                            shift and go to state 117

state 157

    (71) term_aux -> empty .
    MINUS           reduce using rule 71 (term_aux -> empty .)
    PLUS            reduce using rule 71 (term_aux -> empty .)
    COMMA           reduce using rule 71 (term_aux -> empty .)
    RPAREN          reduce using rule 71 (term_aux -> empty .)
    NEQ             reduce using rule 71 (term_aux -> empty .)
    EQ              reduce using rule 71 (term_aux -> empty .)
    LTE             reduce using rule 71 (term_aux -> empty .)
    GTE             reduce using rule 71 (term_aux -> empty .)
    LT              reduce using rule 71 (term_aux -> empty .)
    GT              reduce using rule 71 (term_aux -> empty .)
    OR              reduce using rule 71 (term_aux -> empty .)
    AND             reduce using rule 71 (term_aux -> empty .)
    SEMICOLON       reduce using rule 71 (term_aux -> empty .)
    TO              reduce using rule 71 (term_aux -> empty .)
    BY              reduce using rule 71 (term_aux -> empty .)
    DO              reduce using rule 71 (term_aux -> empty .)


state 158

    (73) term_sign -> DIVIDE .
    LPAREN          reduce using rule 73 (term_sign -> DIVIDE .)
    CTEBOOL         reduce using rule 73 (term_sign -> DIVIDE .)
    CTEFLOAT        reduce using rule 73 (term_sign -> DIVIDE .)
    CTEINT          reduce using rule 73 (term_sign -> DIVIDE .)
    ID              reduce using rule 73 (term_sign -> DIVIDE .)
    BOOL            reduce using rule 73 (term_sign -> DIVIDE .)
    FLOAT           reduce using rule 73 (term_sign -> DIVIDE .)
    INT             reduce using rule 73 (term_sign -> DIVIDE .)
    ELSE            reduce using rule 73 (term_sign -> DIVIDE .)
    IF              reduce using rule 73 (term_sign -> DIVIDE .)
    PRINT           reduce using rule 73 (term_sign -> DIVIDE .)
    INPUT           reduce using rule 73 (term_sign -> DIVIDE .)
    WHILE           reduce using rule 73 (term_sign -> DIVIDE .)
    DO              reduce using rule 73 (term_sign -> DIVIDE .)
    BY              reduce using rule 73 (term_sign -> DIVIDE .)
    TO              reduce using rule 73 (term_sign -> DIVIDE .)
    FROM            reduce using rule 73 (term_sign -> DIVIDE .)
    VOID            reduce using rule 73 (term_sign -> DIVIDE .)
    RETURN          reduce using rule 73 (term_sign -> DIVIDE .)
    FUNC            reduce using rule 73 (term_sign -> DIVIDE .)
    MAIN            reduce using rule 73 (term_sign -> DIVIDE .)
    VARS            reduce using rule 73 (term_sign -> DIVIDE .)
    PROGRAM         reduce using rule 73 (term_sign -> DIVIDE .)


state 159

    (74) term_sign -> TIMES .
    LPAREN          reduce using rule 74 (term_sign -> TIMES .)
    CTEBOOL         reduce using rule 74 (term_sign -> TIMES .)
    CTEFLOAT        reduce using rule 74 (term_sign -> TIMES .)
    CTEINT          reduce using rule 74 (term_sign -> TIMES .)
    ID              reduce using rule 74 (term_sign -> TIMES .)
    BOOL            reduce using rule 74 (term_sign -> TIMES .)
    FLOAT           reduce using rule 74 (term_sign -> TIMES .)
    INT             reduce using rule 74 (term_sign -> TIMES .)
    ELSE            reduce using rule 74 (term_sign -> TIMES .)
    IF              reduce using rule 74 (term_sign -> TIMES .)
    PRINT           reduce using rule 74 (term_sign -> TIMES .)
    INPUT           reduce using rule 74 (term_sign -> TIMES .)
    WHILE           reduce using rule 74 (term_sign -> TIMES .)
    DO              reduce using rule 74 (term_sign -> TIMES .)
    BY              reduce using rule 74 (term_sign -> TIMES .)
    TO              reduce using rule 74 (term_sign -> TIMES .)
    FROM            reduce using rule 74 (term_sign -> TIMES .)
    VOID            reduce using rule 74 (term_sign -> TIMES .)
    RETURN          reduce using rule 74 (term_sign -> TIMES .)
    FUNC            reduce using rule 74 (term_sign -> TIMES .)
    MAIN            reduce using rule 74 (term_sign -> TIMES .)
    VARS            reduce using rule 74 (term_sign -> TIMES .)
    PROGRAM         reduce using rule 74 (term_sign -> TIMES .)


state 160

    (81) forloop -> FROM var ASSIGN expression TO . expression BY expression DO block
    (82) forloop -> FROM var ASSIGN expression TO . expression DO block
    (56) expression -> . exp expression_quadgen expression_aux
    (66) exp -> . term exp_quadgen exp_aux
    (72) term -> . factor term_quadgen term_aux
    (76) factor -> . LPAREN fakefloor super_exp RPAREN
    (77) factor -> . varcte
    (78) factor -> . call
    (79) factor -> . var
    (95) varcte -> . CTEBOOL
    (96) varcte -> . CTEFLOAT
    (97) varcte -> . CTEINT
    (44) call -> . ID LPAREN callvalues RPAREN
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    LPAREN          shift and go to state 109
    CTEBOOL         shift and go to state 118
    CTEFLOAT        shift and go to state 119
    CTEINT          shift and go to state 120
    ID              shift and go to state 108
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44

    var                            shift and go to state 117
    expression                     shift and go to state 185
    exp                            shift and go to state 123
    term                           shift and go to state 113
    factor                         shift and go to state 114
    varcte                         shift and go to state 115
    call                           shift and go to state 116

state 161

    (83) whileloop -> WHILE LPAREN expression RPAREN block .
    ID              reduce using rule 83 (whileloop -> WHILE LPAREN expression RPAREN block .)
    FROM            reduce using rule 83 (whileloop -> WHILE LPAREN expression RPAREN block .)
    WHILE           reduce using rule 83 (whileloop -> WHILE LPAREN expression RPAREN block .)
    INPUT           reduce using rule 83 (whileloop -> WHILE LPAREN expression RPAREN block .)
    PRINT           reduce using rule 83 (whileloop -> WHILE LPAREN expression RPAREN block .)
    IF              reduce using rule 83 (whileloop -> WHILE LPAREN expression RPAREN block .)
    RCURLY          reduce using rule 83 (whileloop -> WHILE LPAREN expression RPAREN block .)
    RETURN          reduce using rule 83 (whileloop -> WHILE LPAREN expression RPAREN block .)


state 162

    (56) expression -> exp expression_quadgen expression_aux .
    RPAREN          reduce using rule 56 (expression -> exp expression_quadgen expression_aux .)
    OR              reduce using rule 56 (expression -> exp expression_quadgen expression_aux .)
    AND             reduce using rule 56 (expression -> exp expression_quadgen expression_aux .)
    COMMA           reduce using rule 56 (expression -> exp expression_quadgen expression_aux .)
    SEMICOLON       reduce using rule 56 (expression -> exp expression_quadgen expression_aux .)
    TO              reduce using rule 56 (expression -> exp expression_quadgen expression_aux .)
    BY              reduce using rule 56 (expression -> exp expression_quadgen expression_aux .)
    DO              reduce using rule 56 (expression -> exp expression_quadgen expression_aux .)


state 163

    (54) expression_aux -> relation . expression
    (56) expression -> . exp expression_quadgen expression_aux
    (66) exp -> . term exp_quadgen exp_aux
    (72) term -> . factor term_quadgen term_aux
    (76) factor -> . LPAREN fakefloor super_exp RPAREN
    (77) factor -> . varcte
    (78) factor -> . call
    (79) factor -> . var
    (95) varcte -> . CTEBOOL
    (96) varcte -> . CTEFLOAT
    (97) varcte -> . CTEINT
    (44) call -> . ID LPAREN callvalues RPAREN
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    LPAREN          shift and go to state 109
    CTEBOOL         shift and go to state 118
    CTEFLOAT        shift and go to state 119
    CTEINT          shift and go to state 120
    ID              shift and go to state 108
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44

    expression                     shift and go to state 186
    exp                            shift and go to state 123
    term                           shift and go to state 113
    factor                         shift and go to state 114
    varcte                         shift and go to state 115
    call                           shift and go to state 116
    var                            shift and go to state 117

state 164

    (55) expression_aux -> empty .
    RPAREN          reduce using rule 55 (expression_aux -> empty .)
    OR              reduce using rule 55 (expression_aux -> empty .)
    AND             reduce using rule 55 (expression_aux -> empty .)
    COMMA           reduce using rule 55 (expression_aux -> empty .)
    SEMICOLON       reduce using rule 55 (expression_aux -> empty .)
    TO              reduce using rule 55 (expression_aux -> empty .)
    BY              reduce using rule 55 (expression_aux -> empty .)
    DO              reduce using rule 55 (expression_aux -> empty .)


state 165

    (57) relation -> NEQ .
    LPAREN          reduce using rule 57 (relation -> NEQ .)
    CTEBOOL         reduce using rule 57 (relation -> NEQ .)
    CTEFLOAT        reduce using rule 57 (relation -> NEQ .)
    CTEINT          reduce using rule 57 (relation -> NEQ .)
    ID              reduce using rule 57 (relation -> NEQ .)
    BOOL            reduce using rule 57 (relation -> NEQ .)
    FLOAT           reduce using rule 57 (relation -> NEQ .)
    INT             reduce using rule 57 (relation -> NEQ .)
    ELSE            reduce using rule 57 (relation -> NEQ .)
    IF              reduce using rule 57 (relation -> NEQ .)
    PRINT           reduce using rule 57 (relation -> NEQ .)
    INPUT           reduce using rule 57 (relation -> NEQ .)
    WHILE           reduce using rule 57 (relation -> NEQ .)
    DO              reduce using rule 57 (relation -> NEQ .)
    BY              reduce using rule 57 (relation -> NEQ .)
    TO              reduce using rule 57 (relation -> NEQ .)
    FROM            reduce using rule 57 (relation -> NEQ .)
    VOID            reduce using rule 57 (relation -> NEQ .)
    RETURN          reduce using rule 57 (relation -> NEQ .)
    FUNC            reduce using rule 57 (relation -> NEQ .)
    MAIN            reduce using rule 57 (relation -> NEQ .)
    VARS            reduce using rule 57 (relation -> NEQ .)
    PROGRAM         reduce using rule 57 (relation -> NEQ .)


state 166

    (58) relation -> EQ .
    LPAREN          reduce using rule 58 (relation -> EQ .)
    CTEBOOL         reduce using rule 58 (relation -> EQ .)
    CTEFLOAT        reduce using rule 58 (relation -> EQ .)
    CTEINT          reduce using rule 58 (relation -> EQ .)
    ID              reduce using rule 58 (relation -> EQ .)
    BOOL            reduce using rule 58 (relation -> EQ .)
    FLOAT           reduce using rule 58 (relation -> EQ .)
    INT             reduce using rule 58 (relation -> EQ .)
    ELSE            reduce using rule 58 (relation -> EQ .)
    IF              reduce using rule 58 (relation -> EQ .)
    PRINT           reduce using rule 58 (relation -> EQ .)
    INPUT           reduce using rule 58 (relation -> EQ .)
    WHILE           reduce using rule 58 (relation -> EQ .)
    DO              reduce using rule 58 (relation -> EQ .)
    BY              reduce using rule 58 (relation -> EQ .)
    TO              reduce using rule 58 (relation -> EQ .)
    FROM            reduce using rule 58 (relation -> EQ .)
    VOID            reduce using rule 58 (relation -> EQ .)
    RETURN          reduce using rule 58 (relation -> EQ .)
    FUNC            reduce using rule 58 (relation -> EQ .)
    MAIN            reduce using rule 58 (relation -> EQ .)
    VARS            reduce using rule 58 (relation -> EQ .)
    PROGRAM         reduce using rule 58 (relation -> EQ .)


state 167

    (59) relation -> LTE .
    LPAREN          reduce using rule 59 (relation -> LTE .)
    CTEBOOL         reduce using rule 59 (relation -> LTE .)
    CTEFLOAT        reduce using rule 59 (relation -> LTE .)
    CTEINT          reduce using rule 59 (relation -> LTE .)
    ID              reduce using rule 59 (relation -> LTE .)
    BOOL            reduce using rule 59 (relation -> LTE .)
    FLOAT           reduce using rule 59 (relation -> LTE .)
    INT             reduce using rule 59 (relation -> LTE .)
    ELSE            reduce using rule 59 (relation -> LTE .)
    IF              reduce using rule 59 (relation -> LTE .)
    PRINT           reduce using rule 59 (relation -> LTE .)
    INPUT           reduce using rule 59 (relation -> LTE .)
    WHILE           reduce using rule 59 (relation -> LTE .)
    DO              reduce using rule 59 (relation -> LTE .)
    BY              reduce using rule 59 (relation -> LTE .)
    TO              reduce using rule 59 (relation -> LTE .)
    FROM            reduce using rule 59 (relation -> LTE .)
    VOID            reduce using rule 59 (relation -> LTE .)
    RETURN          reduce using rule 59 (relation -> LTE .)
    FUNC            reduce using rule 59 (relation -> LTE .)
    MAIN            reduce using rule 59 (relation -> LTE .)
    VARS            reduce using rule 59 (relation -> LTE .)
    PROGRAM         reduce using rule 59 (relation -> LTE .)


state 168

    (60) relation -> GTE .
    LPAREN          reduce using rule 60 (relation -> GTE .)
    CTEBOOL         reduce using rule 60 (relation -> GTE .)
    CTEFLOAT        reduce using rule 60 (relation -> GTE .)
    CTEINT          reduce using rule 60 (relation -> GTE .)
    ID              reduce using rule 60 (relation -> GTE .)
    BOOL            reduce using rule 60 (relation -> GTE .)
    FLOAT           reduce using rule 60 (relation -> GTE .)
    INT             reduce using rule 60 (relation -> GTE .)
    ELSE            reduce using rule 60 (relation -> GTE .)
    IF              reduce using rule 60 (relation -> GTE .)
    PRINT           reduce using rule 60 (relation -> GTE .)
    INPUT           reduce using rule 60 (relation -> GTE .)
    WHILE           reduce using rule 60 (relation -> GTE .)
    DO              reduce using rule 60 (relation -> GTE .)
    BY              reduce using rule 60 (relation -> GTE .)
    TO              reduce using rule 60 (relation -> GTE .)
    FROM            reduce using rule 60 (relation -> GTE .)
    VOID            reduce using rule 60 (relation -> GTE .)
    RETURN          reduce using rule 60 (relation -> GTE .)
    FUNC            reduce using rule 60 (relation -> GTE .)
    MAIN            reduce using rule 60 (relation -> GTE .)
    VARS            reduce using rule 60 (relation -> GTE .)
    PROGRAM         reduce using rule 60 (relation -> GTE .)


state 169

    (61) relation -> LT .
    LPAREN          reduce using rule 61 (relation -> LT .)
    CTEBOOL         reduce using rule 61 (relation -> LT .)
    CTEFLOAT        reduce using rule 61 (relation -> LT .)
    CTEINT          reduce using rule 61 (relation -> LT .)
    ID              reduce using rule 61 (relation -> LT .)
    BOOL            reduce using rule 61 (relation -> LT .)
    FLOAT           reduce using rule 61 (relation -> LT .)
    INT             reduce using rule 61 (relation -> LT .)
    ELSE            reduce using rule 61 (relation -> LT .)
    IF              reduce using rule 61 (relation -> LT .)
    PRINT           reduce using rule 61 (relation -> LT .)
    INPUT           reduce using rule 61 (relation -> LT .)
    WHILE           reduce using rule 61 (relation -> LT .)
    DO              reduce using rule 61 (relation -> LT .)
    BY              reduce using rule 61 (relation -> LT .)
    TO              reduce using rule 61 (relation -> LT .)
    FROM            reduce using rule 61 (relation -> LT .)
    VOID            reduce using rule 61 (relation -> LT .)
    RETURN          reduce using rule 61 (relation -> LT .)
    FUNC            reduce using rule 61 (relation -> LT .)
    MAIN            reduce using rule 61 (relation -> LT .)
    VARS            reduce using rule 61 (relation -> LT .)
    PROGRAM         reduce using rule 61 (relation -> LT .)


state 170

    (62) relation -> GT .
    LPAREN          reduce using rule 62 (relation -> GT .)
    CTEBOOL         reduce using rule 62 (relation -> GT .)
    CTEFLOAT        reduce using rule 62 (relation -> GT .)
    CTEINT          reduce using rule 62 (relation -> GT .)
    ID              reduce using rule 62 (relation -> GT .)
    BOOL            reduce using rule 62 (relation -> GT .)
    FLOAT           reduce using rule 62 (relation -> GT .)
    INT             reduce using rule 62 (relation -> GT .)
    ELSE            reduce using rule 62 (relation -> GT .)
    IF              reduce using rule 62 (relation -> GT .)
    PRINT           reduce using rule 62 (relation -> GT .)
    INPUT           reduce using rule 62 (relation -> GT .)
    WHILE           reduce using rule 62 (relation -> GT .)
    DO              reduce using rule 62 (relation -> GT .)
    BY              reduce using rule 62 (relation -> GT .)
    TO              reduce using rule 62 (relation -> GT .)
    FROM            reduce using rule 62 (relation -> GT .)
    VOID            reduce using rule 62 (relation -> GT .)
    RETURN          reduce using rule 62 (relation -> GT .)
    FUNC            reduce using rule 62 (relation -> GT .)
    MAIN            reduce using rule 62 (relation -> GT .)
    VARS            reduce using rule 62 (relation -> GT .)
    PROGRAM         reduce using rule 62 (relation -> GT .)


state 171

    (87) read -> INPUT LPAREN decvar RPAREN SEMICOLON .
    ID              reduce using rule 87 (read -> INPUT LPAREN decvar RPAREN SEMICOLON .)
    FROM            reduce using rule 87 (read -> INPUT LPAREN decvar RPAREN SEMICOLON .)
    WHILE           reduce using rule 87 (read -> INPUT LPAREN decvar RPAREN SEMICOLON .)
    INPUT           reduce using rule 87 (read -> INPUT LPAREN decvar RPAREN SEMICOLON .)
    PRINT           reduce using rule 87 (read -> INPUT LPAREN decvar RPAREN SEMICOLON .)
    IF              reduce using rule 87 (read -> INPUT LPAREN decvar RPAREN SEMICOLON .)
    RCURLY          reduce using rule 87 (read -> INPUT LPAREN decvar RPAREN SEMICOLON .)
    RETURN          reduce using rule 87 (read -> INPUT LPAREN decvar RPAREN SEMICOLON .)


state 172

    (88) write -> PRINT LPAREN writevalues RPAREN SEMICOLON .
    ID              reduce using rule 88 (write -> PRINT LPAREN writevalues RPAREN SEMICOLON .)
    FROM            reduce using rule 88 (write -> PRINT LPAREN writevalues RPAREN SEMICOLON .)
    WHILE           reduce using rule 88 (write -> PRINT LPAREN writevalues RPAREN SEMICOLON .)
    INPUT           reduce using rule 88 (write -> PRINT LPAREN writevalues RPAREN SEMICOLON .)
    PRINT           reduce using rule 88 (write -> PRINT LPAREN writevalues RPAREN SEMICOLON .)
    IF              reduce using rule 88 (write -> PRINT LPAREN writevalues RPAREN SEMICOLON .)
    RCURLY          reduce using rule 88 (write -> PRINT LPAREN writevalues RPAREN SEMICOLON .)
    RETURN          reduce using rule 88 (write -> PRINT LPAREN writevalues RPAREN SEMICOLON .)


state 173

    (89) writevalues -> CTESTRING COMMA writevalues .
    RPAREN          reduce using rule 89 (writevalues -> CTESTRING COMMA writevalues .)


state 174

    (90) writevalues -> super_exp COMMA writevalues .
    RPAREN          reduce using rule 90 (writevalues -> super_exp COMMA writevalues .)


state 175

    (50) super_exp -> expression super_exp_quadgen super_exp_aux .
    COMMA           reduce using rule 50 (super_exp -> expression super_exp_quadgen super_exp_aux .)
    RPAREN          reduce using rule 50 (super_exp -> expression super_exp_quadgen super_exp_aux .)


state 176

    (48) super_exp_aux -> logic . super_exp
    (50) super_exp -> . expression super_exp_quadgen super_exp_aux
    (56) expression -> . exp expression_quadgen expression_aux
    (66) exp -> . term exp_quadgen exp_aux
    (72) term -> . factor term_quadgen term_aux
    (76) factor -> . LPAREN fakefloor super_exp RPAREN
    (77) factor -> . varcte
    (78) factor -> . call
    (79) factor -> . var
    (95) varcte -> . CTEBOOL
    (96) varcte -> . CTEFLOAT
    (97) varcte -> . CTEINT
    (44) call -> . ID LPAREN callvalues RPAREN
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    LPAREN          shift and go to state 109
    CTEBOOL         shift and go to state 118
    CTEFLOAT        shift and go to state 119
    CTEINT          shift and go to state 120
    ID              shift and go to state 108
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44

    super_exp                      shift and go to state 187
    expression                     shift and go to state 128
    exp                            shift and go to state 123
    term                           shift and go to state 113
    factor                         shift and go to state 114
    varcte                         shift and go to state 115
    call                           shift and go to state 116
    var                            shift and go to state 117

state 177

    (49) super_exp_aux -> empty .
    COMMA           reduce using rule 49 (super_exp_aux -> empty .)
    RPAREN          reduce using rule 49 (super_exp_aux -> empty .)


state 178

    (51) logic -> OR .
    LPAREN          reduce using rule 51 (logic -> OR .)
    CTEBOOL         reduce using rule 51 (logic -> OR .)
    CTEFLOAT        reduce using rule 51 (logic -> OR .)
    CTEINT          reduce using rule 51 (logic -> OR .)
    ID              reduce using rule 51 (logic -> OR .)
    BOOL            reduce using rule 51 (logic -> OR .)
    FLOAT           reduce using rule 51 (logic -> OR .)
    INT             reduce using rule 51 (logic -> OR .)
    ELSE            reduce using rule 51 (logic -> OR .)
    IF              reduce using rule 51 (logic -> OR .)
    PRINT           reduce using rule 51 (logic -> OR .)
    INPUT           reduce using rule 51 (logic -> OR .)
    WHILE           reduce using rule 51 (logic -> OR .)
    DO              reduce using rule 51 (logic -> OR .)
    BY              reduce using rule 51 (logic -> OR .)
    TO              reduce using rule 51 (logic -> OR .)
    FROM            reduce using rule 51 (logic -> OR .)
    VOID            reduce using rule 51 (logic -> OR .)
    RETURN          reduce using rule 51 (logic -> OR .)
    FUNC            reduce using rule 51 (logic -> OR .)
    MAIN            reduce using rule 51 (logic -> OR .)
    VARS            reduce using rule 51 (logic -> OR .)
    PROGRAM         reduce using rule 51 (logic -> OR .)


state 179

    (52) logic -> AND .
    LPAREN          reduce using rule 52 (logic -> AND .)
    CTEBOOL         reduce using rule 52 (logic -> AND .)
    CTEFLOAT        reduce using rule 52 (logic -> AND .)
    CTEINT          reduce using rule 52 (logic -> AND .)
    ID              reduce using rule 52 (logic -> AND .)
    BOOL            reduce using rule 52 (logic -> AND .)
    FLOAT           reduce using rule 52 (logic -> AND .)
    INT             reduce using rule 52 (logic -> AND .)
    ELSE            reduce using rule 52 (logic -> AND .)
    IF              reduce using rule 52 (logic -> AND .)
    PRINT           reduce using rule 52 (logic -> AND .)
    INPUT           reduce using rule 52 (logic -> AND .)
    WHILE           reduce using rule 52 (logic -> AND .)
    DO              reduce using rule 52 (logic -> AND .)
    BY              reduce using rule 52 (logic -> AND .)
    TO              reduce using rule 52 (logic -> AND .)
    FROM            reduce using rule 52 (logic -> AND .)
    VOID            reduce using rule 52 (logic -> AND .)
    RETURN          reduce using rule 52 (logic -> AND .)
    FUNC            reduce using rule 52 (logic -> AND .)
    MAIN            reduce using rule 52 (logic -> AND .)
    VARS            reduce using rule 52 (logic -> AND .)
    PROGRAM         reduce using rule 52 (logic -> AND .)


state 180

    (93) condition -> IF LPAREN expression RPAREN block . ELSE block
    (94) condition -> IF LPAREN expression RPAREN block .
    ELSE            shift and go to state 188
    ID              reduce using rule 94 (condition -> IF LPAREN expression RPAREN block .)
    FROM            reduce using rule 94 (condition -> IF LPAREN expression RPAREN block .)
    WHILE           reduce using rule 94 (condition -> IF LPAREN expression RPAREN block .)
    INPUT           reduce using rule 94 (condition -> IF LPAREN expression RPAREN block .)
    PRINT           reduce using rule 94 (condition -> IF LPAREN expression RPAREN block .)
    IF              reduce using rule 94 (condition -> IF LPAREN expression RPAREN block .)
    RCURLY          reduce using rule 94 (condition -> IF LPAREN expression RPAREN block .)
    RETURN          reduce using rule 94 (condition -> IF LPAREN expression RPAREN block .)


state 181

    (5) returnblock -> LCURLY decvars blockcontent RETURN exp . SEMICOLON RCURLY
    SEMICOLON       shift and go to state 189


state 182

    (76) factor -> LPAREN fakefloor super_exp RPAREN .
    DIVIDE          reduce using rule 76 (factor -> LPAREN fakefloor super_exp RPAREN .)
    TIMES           reduce using rule 76 (factor -> LPAREN fakefloor super_exp RPAREN .)
    MINUS           reduce using rule 76 (factor -> LPAREN fakefloor super_exp RPAREN .)
    PLUS            reduce using rule 76 (factor -> LPAREN fakefloor super_exp RPAREN .)
    COMMA           reduce using rule 76 (factor -> LPAREN fakefloor super_exp RPAREN .)
    RPAREN          reduce using rule 76 (factor -> LPAREN fakefloor super_exp RPAREN .)
    NEQ             reduce using rule 76 (factor -> LPAREN fakefloor super_exp RPAREN .)
    EQ              reduce using rule 76 (factor -> LPAREN fakefloor super_exp RPAREN .)
    LTE             reduce using rule 76 (factor -> LPAREN fakefloor super_exp RPAREN .)
    GTE             reduce using rule 76 (factor -> LPAREN fakefloor super_exp RPAREN .)
    LT              reduce using rule 76 (factor -> LPAREN fakefloor super_exp RPAREN .)
    GT              reduce using rule 76 (factor -> LPAREN fakefloor super_exp RPAREN .)
    OR              reduce using rule 76 (factor -> LPAREN fakefloor super_exp RPAREN .)
    AND             reduce using rule 76 (factor -> LPAREN fakefloor super_exp RPAREN .)
    SEMICOLON       reduce using rule 76 (factor -> LPAREN fakefloor super_exp RPAREN .)
    TO              reduce using rule 76 (factor -> LPAREN fakefloor super_exp RPAREN .)
    BY              reduce using rule 76 (factor -> LPAREN fakefloor super_exp RPAREN .)
    DO              reduce using rule 76 (factor -> LPAREN fakefloor super_exp RPAREN .)


state 183

    (64) exp_aux -> exp_sign exp .
    COMMA           reduce using rule 64 (exp_aux -> exp_sign exp .)
    RPAREN          reduce using rule 64 (exp_aux -> exp_sign exp .)
    NEQ             reduce using rule 64 (exp_aux -> exp_sign exp .)
    EQ              reduce using rule 64 (exp_aux -> exp_sign exp .)
    LTE             reduce using rule 64 (exp_aux -> exp_sign exp .)
    GTE             reduce using rule 64 (exp_aux -> exp_sign exp .)
    LT              reduce using rule 64 (exp_aux -> exp_sign exp .)
    GT              reduce using rule 64 (exp_aux -> exp_sign exp .)
    OR              reduce using rule 64 (exp_aux -> exp_sign exp .)
    AND             reduce using rule 64 (exp_aux -> exp_sign exp .)
    SEMICOLON       reduce using rule 64 (exp_aux -> exp_sign exp .)
    TO              reduce using rule 64 (exp_aux -> exp_sign exp .)
    BY              reduce using rule 64 (exp_aux -> exp_sign exp .)
    DO              reduce using rule 64 (exp_aux -> exp_sign exp .)


state 184

    (70) term_aux -> term_sign term .
    MINUS           reduce using rule 70 (term_aux -> term_sign term .)
    PLUS            reduce using rule 70 (term_aux -> term_sign term .)
    COMMA           reduce using rule 70 (term_aux -> term_sign term .)
    RPAREN          reduce using rule 70 (term_aux -> term_sign term .)
    NEQ             reduce using rule 70 (term_aux -> term_sign term .)
    EQ              reduce using rule 70 (term_aux -> term_sign term .)
    LTE             reduce using rule 70 (term_aux -> term_sign term .)
    GTE             reduce using rule 70 (term_aux -> term_sign term .)
    LT              reduce using rule 70 (term_aux -> term_sign term .)
    GT              reduce using rule 70 (term_aux -> term_sign term .)
    OR              reduce using rule 70 (term_aux -> term_sign term .)
    AND             reduce using rule 70 (term_aux -> term_sign term .)
    SEMICOLON       reduce using rule 70 (term_aux -> term_sign term .)
    TO              reduce using rule 70 (term_aux -> term_sign term .)
    BY              reduce using rule 70 (term_aux -> term_sign term .)
    DO              reduce using rule 70 (term_aux -> term_sign term .)


state 185

    (81) forloop -> FROM var ASSIGN expression TO expression . BY expression DO block
    (82) forloop -> FROM var ASSIGN expression TO expression . DO block
    BY              shift and go to state 190
    DO              shift and go to state 191


state 186

    (54) expression_aux -> relation expression .
    RPAREN          reduce using rule 54 (expression_aux -> relation expression .)
    OR              reduce using rule 54 (expression_aux -> relation expression .)
    AND             reduce using rule 54 (expression_aux -> relation expression .)
    COMMA           reduce using rule 54 (expression_aux -> relation expression .)
    SEMICOLON       reduce using rule 54 (expression_aux -> relation expression .)
    TO              reduce using rule 54 (expression_aux -> relation expression .)
    BY              reduce using rule 54 (expression_aux -> relation expression .)
    DO              reduce using rule 54 (expression_aux -> relation expression .)


state 187

    (48) super_exp_aux -> logic super_exp .
    COMMA           reduce using rule 48 (super_exp_aux -> logic super_exp .)
    RPAREN          reduce using rule 48 (super_exp_aux -> logic super_exp .)


state 188

    (93) condition -> IF LPAREN expression RPAREN block ELSE . block
    (4) block -> . LCURLY decvars blockcontent RCURLY
    LCURLY          shift and go to state 63

    block                          shift and go to state 192

state 189

    (5) returnblock -> LCURLY decvars blockcontent RETURN exp SEMICOLON . RCURLY
    RCURLY          shift and go to state 193


state 190

    (81) forloop -> FROM var ASSIGN expression TO expression BY . expression DO block
    (56) expression -> . exp expression_quadgen expression_aux
    (66) exp -> . term exp_quadgen exp_aux
    (72) term -> . factor term_quadgen term_aux
    (76) factor -> . LPAREN fakefloor super_exp RPAREN
    (77) factor -> . varcte
    (78) factor -> . call
    (79) factor -> . var
    (95) varcte -> . CTEBOOL
    (96) varcte -> . CTEFLOAT
    (97) varcte -> . CTEINT
    (44) call -> . ID LPAREN callvalues RPAREN
    (14) var -> . BOOL
    (15) var -> . FLOAT
    (16) var -> . INT
    (17) var -> . ELSE
    (18) var -> . IF
    (19) var -> . PRINT
    (20) var -> . INPUT
    (21) var -> . WHILE
    (22) var -> . DO
    (23) var -> . BY
    (24) var -> . TO
    (25) var -> . FROM
    (26) var -> . VOID
    (27) var -> . RETURN
    (28) var -> . FUNC
    (29) var -> . MAIN
    (30) var -> . VARS
    (31) var -> . PROGRAM
    (32) var -> . ID LBRACKET CTEINT RBRACKET LBRACKET CTEINT RBRACKET
    (33) var -> . ID LBRACKET CTEINT RBRACKET
    (34) var -> . ID
    LPAREN          shift and go to state 109
    CTEBOOL         shift and go to state 118
    CTEFLOAT        shift and go to state 119
    CTEINT          shift and go to state 120
    ID              shift and go to state 108
    BOOL            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29
    ELSE            shift and go to state 30
    IF              shift and go to state 31
    PRINT           shift and go to state 32
    INPUT           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    BY              shift and go to state 36
    TO              shift and go to state 37
    FROM            shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    FUNC            shift and go to state 41
    MAIN            shift and go to state 42
    VARS            shift and go to state 43
    PROGRAM         shift and go to state 44

    var                            shift and go to state 117
    expression                     shift and go to state 194
    exp                            shift and go to state 123
    term                           shift and go to state 113
    factor                         shift and go to state 114
    varcte                         shift and go to state 115
    call                           shift and go to state 116

state 191

    (82) forloop -> FROM var ASSIGN expression TO expression DO . block
    (4) block -> . LCURLY decvars blockcontent RCURLY
    LCURLY          shift and go to state 63

    block                          shift and go to state 195

state 192

    (93) condition -> IF LPAREN expression RPAREN block ELSE block .
    ID              reduce using rule 93 (condition -> IF LPAREN expression RPAREN block ELSE block .)
    FROM            reduce using rule 93 (condition -> IF LPAREN expression RPAREN block ELSE block .)
    WHILE           reduce using rule 93 (condition -> IF LPAREN expression RPAREN block ELSE block .)
    INPUT           reduce using rule 93 (condition -> IF LPAREN expression RPAREN block ELSE block .)
    PRINT           reduce using rule 93 (condition -> IF LPAREN expression RPAREN block ELSE block .)
    IF              reduce using rule 93 (condition -> IF LPAREN expression RPAREN block ELSE block .)
    RCURLY          reduce using rule 93 (condition -> IF LPAREN expression RPAREN block ELSE block .)
    RETURN          reduce using rule 93 (condition -> IF LPAREN expression RPAREN block ELSE block .)


state 193

    (5) returnblock -> LCURLY decvars blockcontent RETURN exp SEMICOLON RCURLY .
    FUNC            reduce using rule 5 (returnblock -> LCURLY decvars blockcontent RETURN exp SEMICOLON RCURLY .)
    MAIN            reduce using rule 5 (returnblock -> LCURLY decvars blockcontent RETURN exp SEMICOLON RCURLY .)


state 194

    (81) forloop -> FROM var ASSIGN expression TO expression BY expression . DO block
    DO              shift and go to state 196


state 195

    (82) forloop -> FROM var ASSIGN expression TO expression DO block .
    ID              reduce using rule 82 (forloop -> FROM var ASSIGN expression TO expression DO block .)
    FROM            reduce using rule 82 (forloop -> FROM var ASSIGN expression TO expression DO block .)
    WHILE           reduce using rule 82 (forloop -> FROM var ASSIGN expression TO expression DO block .)
    INPUT           reduce using rule 82 (forloop -> FROM var ASSIGN expression TO expression DO block .)
    PRINT           reduce using rule 82 (forloop -> FROM var ASSIGN expression TO expression DO block .)
    IF              reduce using rule 82 (forloop -> FROM var ASSIGN expression TO expression DO block .)
    RCURLY          reduce using rule 82 (forloop -> FROM var ASSIGN expression TO expression DO block .)
    RETURN          reduce using rule 82 (forloop -> FROM var ASSIGN expression TO expression DO block .)


state 196

    (81) forloop -> FROM var ASSIGN expression TO expression BY expression DO . block
    (4) block -> . LCURLY decvars blockcontent RCURLY
    LCURLY          shift and go to state 63

    block                          shift and go to state 197

state 197

    (81) forloop -> FROM var ASSIGN expression TO expression BY expression DO block .
    ID              reduce using rule 81 (forloop -> FROM var ASSIGN expression TO expression BY expression DO block .)
    FROM            reduce using rule 81 (forloop -> FROM var ASSIGN expression TO expression BY expression DO block .)
    WHILE           reduce using rule 81 (forloop -> FROM var ASSIGN expression TO expression BY expression DO block .)
    INPUT           reduce using rule 81 (forloop -> FROM var ASSIGN expression TO expression BY expression DO block .)
    PRINT           reduce using rule 81 (forloop -> FROM var ASSIGN expression TO expression BY expression DO block .)
    IF              reduce using rule 81 (forloop -> FROM var ASSIGN expression TO expression BY expression DO block .)
    RCURLY          reduce using rule 81 (forloop -> FROM var ASSIGN expression TO expression BY expression DO block .)
    RETURN          reduce using rule 81 (forloop -> FROM var ASSIGN expression TO expression BY expression DO block .)
